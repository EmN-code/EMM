id,code
0,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
1,#include contiki.h
2,#include net/ipv6/tcpip.h
3,#include net/ipv6/uip.h
4,#include net/ipv6/uiplib.h
5,#include net/ipv6/uip-udp-packet.h
6,#include net/ipv6/simple-udp.h
7,#include net/ipv6/uip-nameserver.h
8,#include net/routing/routing.h
9,#include net/ipv6/uip-icmp6.h
10,#include net/ipv6/uip-ds6.h
11,#include net/ipv6/psock.h
12,#include net/ipv6/udp-socket.h
13,#include net/ipv6/tcp-socket.h
14,#include net/netstack.h
15,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
16,#include contiki-conf.h
17,#include contiki-default-conf.h
18,#include sys/process.h
19,#include sys/autostart.h
20,#include sys/timer.h
21,#include sys/ctimer.h
22,#include sys/etimer.h
23,#include sys/rtimer.h
24,#include sys/pt.h
25,#include sys/clock.h
26,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
27,"typedef coap_handler_status_t
(* coap_handler_callback_t)"
28,"define COAP_HANDLER(name, handler)"
29,void coap_add_handler(coap_handler_t *handler)
30,void coap_remove_handler(coap_handler_t *handler)
31,void coap_engine_init(void)
32,"int coap_receive(const coap_endpoint_t *src,
                 uint8_t *payload, uint16_t payload_length)"
33,"coap_handler_status_t coap_call_handlers(coap_message_t *request,
                                         coap_message_t *response,
                                         uint8_t *buffer,
                                         uint16_t buffer_size,
                                         int32_t *offset)"
34,typedef void (* coap_resource_handler_t)
35,typedef void (* coap_resource_periodic_handler_t)
36,typedef void (* coap_resource_response_handler_t)
37,typedef void (* coap_resource_trigger_handler_t)
38,"define RESOURCE(name, attributes, get_handler, post_handler, put_handler, delete_handler)"
39,"define PARENT_RESOURCE(name, attributes, get_handler, post_handler, put_handler, delete_handler)"
40,"define SEPARATE_RESOURCE(name, attributes, get_handler, post_handler, put_handler, delete_handler, resume_handler)"
41,"define EVENT_RESOURCE(name, attributes, get_handler, post_handler, put_handler, delete_handler, event_handler)"
42,"define PERIODIC_RESOURCE(name, attributes, get_handler, post_handler, put_handler, delete_handler, period, periodic_handler)"
43,"void coap_activate_resource(coap_resource_t *resource, const char *path)"
44,#include coap.h
45,#include coap-timer.h
46,#include coap-transactions.h
47,#include coap-observe.h
48,#include coap-separate.h
49,#include coap-observe-client.h
50,#include coap-transport.h
51,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
52,typedef void (* coap_blocking_response_handler_t)
53,"define COAP_BLOCKING_REQUEST(server_endpoint, request, chunk_handler)"
54,"struct coap_blocking_request_state {
  coap_request_state_t state;
  struct pt pt;
  struct process *process;
} coap_blocking_request_state_t;"
55,#include sys/pt.h
56,#include coap-transactions.h
57,#include coap-request-state.h
58,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
59,"similar peripherals (e.g. a reed relay can also be abstracted through this
 * HAL)"
60,this API (recommended)
61,define BUTTON_HAL_DEBOUNCE_DURATION (CLOCK_SECOND >> 6)
62,the BUTTON_HAL_GET_DESCRIPTION()
63,negative logic (active: low)
64,the duration (in seconds)
65,"define BUTTON_HAL_BUTTON(name, descr, po, pi, u, id, nl)"
66,"define BUTTON_HAL_BUTTON(name, descr, pi, u, id, nl)"
67,define BUTTON_HAL_GET_DESCRIPTION(b)
68,"define BUTTON_HAL_BUTTON(name, descr, po, pi, u, id, nl)"
69,"define BUTTON_HAL_BUTTON(name, descr, pi, u, id, nl)"
70,define BUTTON_HAL_GET_DESCRIPTION(b)
71,define BUTTON_HAL_BUTTONS(...)
72,void button_hal_init(void)
73,"s index (0, 1, ... button_hal_button_count - 1)"
74,a button (pressed / released)
75,uint8_t button_hal_get_state(button_hal_button_t *button)
76,#include contiki.h
77,#include dev/gpio-hal.h
78,#include sys/clock.h
79,#include sys/ctimer.h
80,#include stdint.h
81,#include stdbool.h
82,#include string.h
83,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
84,"similar peripherals (e.g. a reed relay can also be abstracted through this
 * HAL)"
85,this API (recommended)
86,define BUTTON_HAL_DEBOUNCE_DURATION (CLOCK_SECOND >> 6)
87,the BUTTON_HAL_GET_DESCRIPTION()
88,negative logic (active: low)
89,the duration (in seconds)
90,"define BUTTON_HAL_BUTTON(name, descr, po, pi, u, id, nl)"
91,"define BUTTON_HAL_BUTTON(name, descr, pi, u, id, nl)"
92,define BUTTON_HAL_GET_DESCRIPTION(b)
93,"define BUTTON_HAL_BUTTON(name, descr, po, pi, u, id, nl)"
94,"define BUTTON_HAL_BUTTON(name, descr, pi, u, id, nl)"
95,define BUTTON_HAL_GET_DESCRIPTION(b)
96,define BUTTON_HAL_BUTTONS(...)
97,void button_hal_init(void)
98,"s index (0, 1, ... button_hal_button_count - 1)"
99,a button (pressed / released)
100,uint8_t button_hal_get_state(button_hal_button_t *button)
101,#include contiki.h
102,#include dev/gpio-hal.h
103,#include sys/clock.h
104,#include sys/ctimer.h
105,#include stdint.h
106,#include stdbool.h
107,#include string.h
108,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
109,"define LOG_COAP_EP(level, endpoint)"
110,define LOG_ERR_COAP_EP(endpoint)
111,define LOG_WARN_COAP_EP(endpoint)
112,define LOG_INFO_COAP_EP(endpoint)
113,define LOG_DBG_COAP_EP(endpoint)
114,"define LOG_COAP_STRING(level, text, len)"
115,"define LOG_ERR_COAP_STRING(text, len)"
116,"define LOG_WARN_COAP_STRING(text, len)"
117,"define LOG_INFO_COAP_STRING(text, len)"
118,"define LOG_DBG_COAP_STRING(text, len)"
119,"void coap_log_string(const char *text, size_t len)"
120,#include contiki.h
121,#include sys/log.h
122,#include coap-endpoint.h
123,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
124,define DHT11_CONFIGURE_GPIO_PORT   (0)
125,define DHT11_CONFIGURE_GPIO_PIN    (1)
126,define DHT11_VALUE_HUMIDITY_INTEGER       (0)
127,define DHT11_VALUE_HUMIDITY_DECIMAL       (1)
128,define DHT11_VALUE_TEMPERATURE_INTEGER    (2)
129,define DHT11_VALUE_TEMPERATURE_DECIMAL    (3)
130,define DHT11_STATUS_OKAY               (0)
131,define DHT11_STATUS_TIMEOUT            (1)
132,define DHT11_STATUS_CHECKSUM_FAILED    (2)
133,#include sensors.h
134,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
135,define RGB_LED_MAGENTA (RGB_LED_RED | RGB_LED_BLUE)
136,define RGB_LED_YELLOW  (RGB_LED_RED | RGB_LED_GREEN)
137,define RGB_LED_CYAN    (RGB_LED_GREEN | RGB_LED_BLUE )
138,define RGB_LED_WHITE   (RGB_LED_RED | RGB_LED_GREEN | RGB_LED_BLUE)
139,void rgb_led_off(void)
140,void rgb_led_set(uint8_t colour)
141,#include contiki.h
142,#include stdint.h
143,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
144,with etimer_set()
145,the etimer_set()
146,"void etimer_set(struct etimer *et, clock_time_t interval)"
147,the etimer_restart()
148,sa etimer_restart()
149,void etimer_reset(struct etimer *et)
150,sa etimer_reset()
151,"void etimer_reset_with_new_interval(struct etimer *et, clock_time_t interval)"
152,the etimer_set()
153,sa etimer_reset()
154,void etimer_restart(struct etimer *et)
155,use etimer_set()
156,sa etimer_set()
157,sa etimer_reset()
158,"void etimer_adjust(struct etimer *et, int td)"
159,clock_time_t etimer_expiration_time(struct etimer *et)
160,"start time (when the timer
 *             was last set)"
161,clock_time_t etimer_start_time(struct etimer *et)
162,"bool
etimer_expired(struct etimer *et)"
163,with etimer_set()
164,or etimer_reset()
165,void etimer_stop(struct etimer *et)
166,void etimer_request_poll(void)
167,int etimer_pending(void)
168,clock_time_t etimer_next_expiration_time(void)
169,#include contiki.h
170,#include stdbool.h
171,#include stddef.h
172,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
173,transmission status (see os/net/mac/mac.h)
174,#include contiki.h
175,#include net/ipv6/uip.h
176,#include net/ipv6/uip-ds6-nbr.h
177,#include net/ipv6/uip-ds6-route.h
178,#include net/ipv6/uip-sr.h
179,#include net/linkaddr.h
180,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
181,void random_init(unsigned short seed)
182,short random_rand(void)
183,int rand()
184,long random()
185,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
186,network stack (NETSTACK)
187,"void
netstack_init(void)"
188,enum netstack_ip_action (*process_input)
189,enum netstack_ip_action (*process_output)
190,"netstack_ip_action netstack_process_ip_callback(uint8_t type, const linkaddr_t *localdest)"
191,void netstack_ip_packet_processor_add(struct netstack_ip_packet_processor *p)
192,void netstack_ip_packet_processor_remove(struct netstack_ip_packet_processor *p)
193,"define NETSTACK_SNIFFER(name, input_callback, output_callback)"
194,void netstack_sniffer_add(struct netstack_sniffer *s)
195,void netstack_sniffer_remove(struct netstack_sniffer *s)
196,"enum netstack_ip_action {
  NETSTACK_IP_PROCESS = 0, /* Default behaviour - nothing else */
  NETSTACK_IP_DROP = 1, /* Drop this packet before processing/sending anymore */
};"
197,"enum netstack_ip_callback_type {
  NETSTACK_IP_INPUT = 0,
  NETSTACK_IP_OUTPUT = 1,
};"
198,#include contiki.h
199,#include net/mac/mac.h
200,#include net/mac/framer/framer.h
201,#include dev/radio.h
202,#include net/linkaddr.h
203,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
204,typedef void (* simple_udp_callback)
205,"int simple_udp_register(struct simple_udp_connection *c,
                        uint16_t local_port,
                        uip_ipaddr_t *remote_addr,
                        uint16_t remote_port,
                        simple_udp_callback receive_callback)"
206,sa simple_udp_sendto()
207,"int simple_udp_send(struct simple_udp_connection *c,
                    const void *data, uint16_t datalen)"
208,with simple_udp_register()
209,sa simple_udp_send()
210,"int simple_udp_sendto(struct simple_udp_connection *c,
                      const void *data, uint16_t datalen,
                      const uip_ipaddr_t *to)"
211,with simple_udp_register()
212,sa simple_udp_sendto()
213,"int simple_udp_sendto_port(struct simple_udp_connection *c,
			   const void *data, uint16_t datalen,
			   const uip_ipaddr_t *to, uint16_t to_port)"
214,void simple_udp_init(void)
215,#include net/ipv6/uip.h
216,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
217,of Things (IoT)
218,Len MSB(0)
219,Len LSB(6)
220,Protocol Level (3)
221,Len MSB(0)
222,Len LSB(4)
223,Protocol Level (4)
224,define DBG(...)
225,define DBG(...)
226,MQTT payload (after VHDR)
227,typedef void (*mqtt_event_callback_t)
228,typedef void (*mqtt_topic_callback_t)
229,"MQTT_5
  LIST_STRUCT(properties)"
230,Binary capabilities (default: enabled)
231,"mqtt_status_t mqtt_register(struct mqtt_connection *conn,
                            struct process *app_process,
                            char *client_id,
                            mqtt_event_callback_t event_callback,
                            uint16_t max_segment_size)"
232,Output properties (MQTTv5-only)
233,"mqtt_status_t mqtt_connect(struct mqtt_connection *conn,
                           char *host,
                           uint16_t port,
                           uint16_t keep_alive,
#if MQTT_5
                           uint8_t clean_session,
                           struct mqtt_prop_list *prop_list)"
234,Output properties (MQTTv5-only)
235,"void mqtt_disconnect(struct mqtt_connection *conn,
                     struct mqtt_prop_list *prop_list)"
236,void mqtt_disconnect(struct mqtt_connection *conn)
237,No Local (MQTTv5-only)
238,As Published (MQTTv5-only)
239,handling options (MQTTv5-only)
240,Output properties (MQTTv5-only)
241,"mqtt_status_t mqtt_subscribe(struct mqtt_connection *conn,
                             uint16_t *mid,
                             char *topic,
#if MQTT_5
                             mqtt_qos_level_t qos_level,
                             mqtt_nl_en_t nl, mqtt_rap_en_t rap,
                             mqtt_retain_handling_t ret_handling,
                             struct mqtt_prop_list *prop_list)"
242,Output properties (MQTTv5-only)
243,"mqtt_status_t mqtt_unsubscribe(struct mqtt_connection *conn,
                               uint16_t *mid,
#if MQTT_5
                               char *topic,
                               struct mqtt_prop_list *prop_list)"
244,to send (MQTTv5-only)
245,alias s(MQTTv5-only)
246,Output properties (MQTTv5-only)
247,"mqtt_status_t mqtt_publish(struct mqtt_connection *conn,
                           uint16_t *mid,
                           char *topic,
                           uint8_t *payload,
                           uint32_t payload_size,
                           mqtt_qos_level_t qos_level,
#if MQTT_5
                           mqtt_retain_t retain,
                           uint8_t topic_alias,
                           mqtt_topic_alias_en_t topic_alias_en,
                           struct mqtt_prop_list *prop_list)"
248,"void mqtt_set_username_password(struct mqtt_connection *conn,
                                char *username,
                                char *password)"
249,Will message (payload)
250,message properties (MQTTv5-only)
251,and message (payload)
252,"void mqtt_set_last_will(struct mqtt_connection *conn,
                        char *topic,
                        char *message,
#if MQTT_5
                        mqtt_qos_level_t qos,
                        struct mqtt_prop_list *will_props)"
253,define mqtt_connected(conn)
254,define mqtt_ready(conn)
255,"void mqtt_encode_var_byte_int(uint8_t *vbi_out,
                              uint8_t *vbi_bytes,
                              uint32_t val)"
256,"uint8_t mqtt_decode_var_byte_int(const uint8_t *input_data_ptr,
                                 int input_data_len,
                                 uint32_t *input_pos,
                                 uint32_t *pkt_byte_count,
                                 uint16_t *dest)"
257,authentication message (MQTTv5-only)
258,"to send (continue authentication or
 *        re-authentication)"
259,"mqtt_status_t mqtt_auth(struct mqtt_connection *conn,
                        mqtt_auth_type_t auth_type,
                        struct mqtt_prop_list *prop_list)"
260,#include contiki.h
261,#include contiki-net.h
262,#include contiki-lib.h
263,#include lib/random.h
264,#include sys/ctimer.h
265,#include sys/etimer.h
266,#include net/ipv6/uip.h
267,#include net/ipv6/uip-ds6.h
268,#include dev/leds.h
269,#include tcp-socket.h
270,#include udp-socket.h
271,#include stdlib.h
272,#include stdio.h
273,#include string.h
274,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
275,to register_prop()
276,topic aliases (when receiving)
277,packet Properties (MQTTv5.0)
278,Property identifier (as an MQTT Variable Byte Integer)
279,void mqtt_prop_print_input_props(struct mqtt_connection *conn)
280,"uint32_t mqtt_prop_encode(struct mqtt_prop_out_property **prop_out, mqtt_vhdr_prop_t prop_id,
                          va_list args)"
281,void mqtt_prop_parse_connack_props(struct mqtt_connection *conn)
282,"void mqtt_prop_parse_auth_props(struct mqtt_connection *conn, struct mqtt_prop_auth_event *event)"
283,void mqtt_prop_decode_input_props(struct mqtt_connection *conn)
284,"define mqtt_prop_register(l, out, msg, id, ...)"
285,"define mqtt_prop_register(l, prop, out, msg, id, ...)"
286,"uint8_t mqtt_prop_register_internal(struct mqtt_prop_list **prop_list,
#if !MQTT_PROP_USE_MEMB
                                    struct mqtt_prop_out_property *prop,
#endif
                                    mqtt_msg_type_t msg,
                                    mqtt_vhdr_prop_t prop_id,
                                    struct mqtt_prop_out_property **prop_out, ...)"
287,void mqtt_prop_create_list(struct mqtt_prop_list **prop_list_out)
288,"void mqtt_prop_print_list(struct mqtt_prop_list *prop_list, mqtt_vhdr_prop_t prop_id)"
289,void mqtt_prop_clear_list(struct mqtt_prop_list **prop_list)
290,void mqtt_props_init()
291,#include mqtt.h
292,#include stdarg.h
