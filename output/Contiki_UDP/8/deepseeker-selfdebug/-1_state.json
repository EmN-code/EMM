{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a Contiki program for the NRF52840 that connects to a UDP server at `47.102.103.1:20001` to send device state (\u201dwork or not work\u201d) by UDP method every five seconds."
        ],
        [
            "user",
            "Now, try again. Check the error information: ['hello-world.c:6:10: fatal error: net/ip/uip.h: No such file or directory'] and Invoke the code tool to solve the error and structure the output with a prefix and code block."
        ]
    ],
    "generation": "\n#include <stdio.h>\n#include <string.h>\n#include \"contiki.h\"\n#include \"contiki-net.h\"\n#include \"sys/etimer.h\"\n#include \"dev/button-hal.h\"\n\n#define UDP_SERVER_IP \"47.102.103.1\"\n#define UDP_SERVER_PORT 20001\n#define DEVICE_STATE_WORK \"work\"\n#define DEVICE_STATE_NOT_WORK \"not work\"\n#define SEND_INTERVAL (5 * CLOCK_SECOND)\n\nstatic struct uip_udp_conn *udp_conn;\nstatic struct etimer et;\nstatic char device_state[10];\n\nPROCESS(udp_client_process, \"UDP Client Process\");\nAUTOSTART_PROCESSES(&udp_client_process);\n\nvoid send_udp_message(const char *message) {\n    uip_ipaddr_t addr;\n    uip_ipaddr(&addr, 47, 102, 103, 1);\n    uip_udp_packet_send(udp_conn, message, strlen(message));\n}\n\nPROCESS_THREAD(udp_client_process, ev, data) {\n    PROCESS_BEGIN();\n\n    // Initialize the UDP connection\n    udp_conn = udp_new(NULL, UIP_HTONS(0), NULL);\n    udp_bind(udp_conn, UIP_HTONS(0));\n\n    // Set the device state to \"work\" initially\n    strcpy(device_state, DEVICE_STATE_WORK);\n\n    // Set the periodic timer\n    etimer_set(&et, SEND_INTERVAL);\n\n    while(1) {\n        PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));\n\n        // Send the device state to the UDP server\n        send_udp_message(device_state);\n\n        // Toggle the device state\n        if (strcmp(device_state, DEVICE_STATE_WORK) == 0) {\n            strcpy(device_state, DEVICE_STATE_NOT_WORK);\n        } else {\n            strcpy(device_state, DEVICE_STATE_WORK);\n        }\n\n        // Reset the timer for the next interval\n        etimer_reset(&et);\n    }\n\n    PROCESS_END();\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 9
}