{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop Zephyr code on an ESP32 to achieve interrupt handling. The program uses atomic variables to verify if disabling and restoring interrupts works correctly. You should use irq but not use gpio interface. "
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/sys/atomic.h>\n#include <zephyr/irq.h>\n#include <zephyr/init.h>\n#include <zephyr/device.h>\n\n#define MY_IRQ 15  // Example IRQ number, adjust according to your hardware\n\nstatic atomic_t interrupt_flag = ATOMIC_INIT(0);\n\nvoid my_isr(const void *arg)\n{\n    ARG_UNUSED(arg);\n\n    // Set the interrupt flag\n    atomic_set(&interrupt_flag, 1);\n\n    // Clear the interrupt (if necessary)\n    // This part depends on the specific hardware and how the interrupt is cleared\n    // For example, if the interrupt is edge-triggered, you might need to clear the source.\n}\n\nvoid test_interrupt_handling(void)\n{\n    // Disable interrupts\n    unsigned int key = irq_lock();\n\n    // Check if the interrupt flag is set\n    if (atomic_get(&interrupt_flag) == 1) {\n        printk(\"Interrupt was handled while interrupts were disabled!\\n\");\n    } else {\n        printk(\"Interrupt was not handled while interrupts were disabled.\\n\");\n    }\n\n    // Restore interrupts\n    irq_unlock(key);\n}\n\nvoid main(void)\n{\n    // Register the ISR for the specific IRQ\n    irq_connect_dynamic(MY_IRQ, 0, my_isr, NULL, 0);\n\n    // Enable the IRQ\n    irq_enable(MY_IRQ);\n\n    // Simulate some work\n    k_sleep(K_SECONDS(1));\n\n    // Test the interrupt handling\n    test_interrupt_handling();\n\n    // Clean up (if necessary)\n    irq_disable(MY_IRQ);\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}