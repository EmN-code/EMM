{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop Zephyr code on an ESP32 to achieve interrupt handling. The program uses atomic variables to verify if disabling and restoring interrupts works correctly. You should use irq but not use gpio interface. "
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/sys/atomic.h>\n#include <zephyr/irq.h>\n#include <zephyr/init.h>\n\n#define MY_IRQ 15  // Example IRQ number, adjust according to your ESP32 configuration\n\nstatic atomic_t interrupt_flag = ATOMIC_INIT(0);\n\nvoid my_isr(const void *arg)\n{\n    ARG_UNUSED(arg);\n\n    // Set the interrupt flag\n    atomic_set(&interrupt_flag, 1);\n\n    // Clear the interrupt (if necessary)\n    // This part depends on the specific hardware and how the interrupt is triggered and cleared\n    // For example, if the interrupt is edge-triggered, you might need to clear the interrupt source here\n}\n\nvoid main(void)\n{\n    // Register the ISR for the specific IRQ\n    irq_connect_dynamic(MY_IRQ, 0, my_isr, NULL, 0);\n\n    // Enable the IRQ\n    irq_enable(MY_IRQ);\n\n    // Main loop to check the interrupt flag\n    while (1) {\n        // Disable interrupts\n        unsigned int key = irq_lock();\n\n        // Check the interrupt flag\n        if (atomic_get(&interrupt_flag) == 1) {\n            printk(\"Interrupt occurred and handled!\\n\");\n            // Clear the interrupt flag\n            atomic_set(&interrupt_flag, 0);\n        }\n\n        // Restore interrupts\n        irq_unlock(key);\n\n        // Add a small delay to avoid busy-waiting\n        k_sleep(K_MSEC(100));\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}