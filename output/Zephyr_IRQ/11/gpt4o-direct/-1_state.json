{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop Zephyr code on an ESP32 to achieve interrupt handling. The program uses atomic variables to verify if disabling and restoring interrupts works correctly. You should use irq but not use gpio interface. "
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/irq.h>\n#include <zephyr/sys/atomic.h>\n#include <zephyr/sys/printk.h>\n\n#define MY_IRQ 15  // Example IRQ number, adjust according to your hardware\n\nstatic atomic_t interrupt_flag = ATOMIC_INIT(0);\n\nvoid my_isr(const void *arg)\n{\n    atomic_set(&interrupt_flag, 1);\n    printk(\"Interrupt occurred!\\n\");\n}\n\nint main(void)\n{\n    printk(\"Starting interrupt handling test on ESP32\\n\");\n\n    // Register the ISR for the specified IRQ\n    irq_connect_dynamic(MY_IRQ, 0, my_isr, NULL, 0);\n\n    // Enable the IRQ\n    irq_enable(MY_IRQ);\n\n    // Test disabling and restoring interrupts\n    printk(\"Disabling interrupts...\\n\");\n    unsigned int key = irq_lock();\n\n    // Simulate some work while interrupts are disabled\n    k_sleep(K_MSEC(100));\n\n    // Check if the interrupt flag was set (should not be set)\n    if (atomic_get(&interrupt_flag) == 1) {\n        printk(\"Error: Interrupt flag set while interrupts were disabled!\\n\");\n    } else {\n        printk(\"Interrupts disabled successfully.\\n\");\n    }\n\n    // Restore interrupts\n    irq_unlock(key);\n\n    // Wait for an interrupt to occur\n    k_sleep(K_SECONDS(1));\n\n    // Check if the interrupt flag was set (should be set)\n    if (atomic_get(&interrupt_flag) == 1) {\n        printk(\"Interrupt flag set correctly after restoring interrupts.\\n\");\n    } else {\n        printk(\"Error: Interrupt flag not set after restoring interrupts!\\n\");\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}