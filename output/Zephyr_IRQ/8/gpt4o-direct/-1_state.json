{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop Zephyr code on an ESP32 to achieve interrupt handling. The program uses atomic variables to verify if disabling and restoring interrupts works correctly. You should use irq but not use gpio interface. "
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/irq.h>\n#include <zephyr/sys/atomic.h>\n#include <zephyr/sys/printk.h>\n\n#define IRQ_LINE 1  // Example IRQ line, adjust according to your hardware\n\nstatic atomic_t interrupt_flag = ATOMIC_INIT(0);\n\nvoid custom_isr(const void *arg)\n{\n    atomic_set(&interrupt_flag, 1);\n    printk(\"Interrupt occurred!\\n\");\n}\n\nint main(void)\n{\n    printk(\"Starting interrupt handling test on ESP32\\n\");\n\n    // Register the custom ISR\n    irq_connect_dynamic(IRQ_LINE, 0, custom_isr, NULL, 0);\n\n    // Enable the IRQ line\n    irq_enable(IRQ_LINE);\n\n    // Simulate an interrupt by triggering the IRQ line\n    // This part depends on how you can trigger the IRQ on your hardware\n    // For example, if you have a timer or another peripheral that can generate an interrupt\n    // you would configure that here.\n\n    // Wait for the interrupt to occur\n    while (atomic_get(&interrupt_flag) == 0) {\n        k_sleep(K_MSEC(100));\n    }\n\n    // Disable interrupts to check if the flag is still set\n    irq_disable(IRQ_LINE);\n\n    if (atomic_get(&interrupt_flag) == 1) {\n        printk(\"Interrupts disabled, flag is still set.\\n\");\n    } else {\n        printk(\"Interrupts disabled, flag was reset.\\n\");\n    }\n\n    // Restore interrupts\n    irq_enable(IRQ_LINE);\n\n    printk(\"Interrupt handling test completed.\\n\");\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}