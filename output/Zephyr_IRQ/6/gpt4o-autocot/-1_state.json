{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop Zephyr code on an ESP32 to achieve interrupt handling. The program uses atomic variables to verify if disabling and restoring interrupts works correctly. You should use irq but not use gpio interface. "
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/sys/atomic.h>\n#include <zephyr/irq.h>\n#include <zephyr/init.h>\n#include <zephyr/device.h>\n\n#define MY_IRQ 15  // Example IRQ number, adjust according to your hardware\n\nstatic atomic_t interrupt_flag = ATOMIC_INIT(0);\n\nvoid my_isr(const void *arg)\n{\n    atomic_set(&interrupt_flag, 1);\n    printk(\"Interrupt occurred!\\n\");\n}\n\nint main(void)\n{\n    printk(\"Starting interrupt handling test on ESP32\\n\");\n\n    // Register the ISR for the specified IRQ\n    irq_connect_dynamic(MY_IRQ, 0, my_isr, NULL, 0);\n\n    // Enable the IRQ\n    irq_enable(MY_IRQ);\n\n    // Simulate an interrupt by triggering the IRQ (this part depends on your hardware)\n    // For example, if you have a timer or a specific hardware trigger, use that here.\n\n    // Wait for the interrupt to occur\n    while (atomic_get(&interrupt_flag) == 0) {\n        k_sleep(K_MSEC(100));\n    }\n\n    // Disable the IRQ to verify that interrupts are restored correctly\n    unsigned int key = irq_lock();\n    irq_disable(MY_IRQ);\n\n    // Simulate another interrupt (should not be handled)\n    // Trigger the IRQ again here\n\n    // Restore interrupts\n    irq_unlock(key);\n\n    // Check if the interrupt flag is still set (it should be)\n    if (atomic_get(&interrupt_flag) == 1) {\n        printk(\"Interrupt handling and restoration verified successfully!\\n\");\n    } else {\n        printk(\"Interrupt handling verification failed!\\n\");\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}