{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop Zephyr code on an ESP32 to achieve interrupt handling. The program uses atomic variables to verify if disabling and restoring interrupts works correctly. You should use irq but not use gpio interface. "
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/irq.h>\n#include <zephyr/sys/atomic.h>\n\n#define MY_IRQ 15  // Example IRQ number for ESP32\n\nstatic atomic_t interrupt_flag = ATOMIC_INIT(0);\n\nvoid my_isr(const void *arg)\n{\n    ARG_UNUSED(arg);\n\n    // Set the interrupt flag\n    atomic_set(&interrupt_flag, 1);\n}\n\nint main(void)\n{\n    // Attach the ISR to the IRQ\n    irq_connect_dynamic(MY_IRQ, 0, my_isr, NULL, 0);\n\n    // Enable the IRQ\n    irq_enable(MY_IRQ);\n\n    // Disable interrupts\n    unsigned int key = irq_lock();\n\n    // Trigger the IRQ (this is a simulation, actual triggering depends on hardware)\n    // For example, on ESP32, you might trigger a timer or a specific peripheral IRQ\n    // Here, we just simulate the interrupt by setting the flag manually\n    atomic_set(&interrupt_flag, 1);\n\n    // Verify that the interrupt flag is set\n    if (atomic_get(&interrupt_flag) == 1) {\n        printk(\"Interrupt flag set while interrupts are disabled. Test failed.\\n\");\n    } else {\n        printk(\"Interrupt flag not set while interrupts are disabled. Test passed.\\n\");\n    }\n\n    // Restore interrupts\n    irq_unlock(key);\n\n    // Verify that the interrupt flag is set after restoring interrupts\n    if (atomic_get(&interrupt_flag) == 1) {\n        printk(\"Interrupt flag set after restoring interrupts. Test passed.\\n\");\n    } else {\n        printk(\"Interrupt flag not set after restoring interrupts. Test failed.\\n\");\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}