{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:6:10: fatal error: zephyr/drivers/wifi.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ],
        [
            "user",
            "Now, try again. Check the error information: ['E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:7:10: fatal error: zephyr/drivers/wifi.h: No such file or directory\\r'] and Invoke the code tool to solve the error and structure the output with a prefix and code block."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/net/mqtt.h>\n#include <zephyr/device.h>\n#include <zephyr/drivers/wifi.h>\n#include <zephyr/logging/log.h>\n\nLOG_MODULE_REGISTER(main);\n\n#define WIFI_SSID \"your_wifi_ssid\"\n#define WIFI_PSK \"your_wifi_password\"\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"state\"\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_publish_param publish_param;\n\nvoid wifi_connect(void) {\n    const struct device *wifi_dev = device_get_binding(\"esp32_wifi\");\n    if (!wifi_dev) {\n        LOG_ERR(\"WiFi device not found\");\n        return;\n    }\n\n    struct wifi_connect_req_params wifi_params = {\n        .ssid = WIFI_SSID,\n        .ssid_length = strlen(WIFI_SSID),\n        .psk = WIFI_PSK,\n        .psk_length = strlen(WIFI_PSK),\n        .channel = WIFI_CHANNEL_ANY,\n        .security = WIFI_SECURITY_TYPE_PSK,\n    };\n\n    if (wifi_connect(wifi_dev, &wifi_params) < 0) {\n        LOG_ERR(\"Failed to connect to WiFi\");\n    } else {\n        LOG_INF(\"Connected to WiFi\");\n    }\n}\n\nvoid mqtt_evt_handler(struct mqtt_client *const client, const struct mqtt_evt *evt) {\n    switch (evt->type) {\n        case MQTT_EVT_CONNACK:\n            if (evt->result == 0) {\n                LOG_INF(\"Connected to MQTT broker\");\n            } else {\n                LOG_ERR(\"Failed to connect to MQTT broker: %d\", evt->result);\n            }\n            break;\n        case MQTT_EVT_DISCONNECT:\n            LOG_INF(\"Disconnected from MQTT broker\");\n            break;\n        default:\n            break;\n    }\n}\n\nvoid mqtt_publish_state(struct mqtt_client *client, const char *state) {\n    struct mqtt_publish_param param = {\n        .message = {\n            .topic = {\n                .topic.utf8 = MQTT_TOPIC,\n                .topic.size = strlen(MQTT_TOPIC),\n            },\n            .payload.data = state,\n            .payload.len = strlen(state),\n        },\n        .dup_flag = 0,\n        .retain_flag = 0,\n        .message_id = 0,\n    };\n\n    int ret = mqtt_publish(client, &param);\n    if (ret < 0) {\n        LOG_ERR(\"Failed to publish message: %d\", ret);\n    } else {\n        LOG_INF(\"Published state: %s\", state);\n    }\n}\n\nint main(void) {\n    wifi_connect();\n\n    struct sockaddr_in broker_addr = {\n        .sin_family = AF_INET,\n        .sin_port = htons(MQTT_BROKER_PORT),\n    };\n    inet_pton(AF_INET, MQTT_BROKER_IP, &broker_addr.sin_addr);\n\n    mqtt_client_init(&client_ctx);\n    client_ctx.broker = &broker_addr;\n    client_ctx.evt_cb = mqtt_evt_handler;\n    client_ctx.rx_buf = rx_buffer;\n    client_ctx.rx_buf_size = sizeof(rx_buffer);\n    client_ctx.tx_buf = tx_buffer;\n    client_ctx.tx_buf_size = sizeof(tx_buffer);\n\n    int ret = mqtt_connect(&client_ctx);\n    if (ret < 0) {\n        LOG_ERR(\"Failed to connect to MQTT broker: %d\", ret);\n        return -1;\n    }\n\n    while (1) {\n        mqtt_publish_state(&client_ctx, \"work\");\n        k_sleep(K_SECONDS(5));\n        mqtt_publish_state(&client_ctx, \"not work\");\n        k_sleep(K_SECONDS(5));\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 11
}