{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/socket.h>\n#include <net/mqtt.h>\n#include <logging/log.h>\n#include <string.h>\n\n#define MQTT_BROKER_ADDR \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n#define MQTT_CLIENT_ID \"esp32_client\"\n#define MQTT_USERNAME NULL\n#define MQTT_PASSWORD NULL\n\n#define STACK_SIZE 1024\n#define PRIORITY 7\n\nLOG_MODULE_REGISTER(main);\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_utf8 topic;\nstatic struct mqtt_utf8 payload;\nstatic struct sockaddr_in broker;\n\nvoid publish_state(struct mqtt_client *client) {\n    static bool state = false;\n    const char *state_str = state ? \"work\" : \"not work\";\n    state = !state;\n\n    topic.utf8 = MQTT_TOPIC;\n    topic.size = strlen(MQTT_TOPIC);\n\n    payload.utf8 = state_str;\n    payload.size = strlen(state_str);\n\n    int ret = mqtt_publish(client, &topic, &payload, MQTT_QOS_0_AT_MOST_ONCE, false);\n    if (ret) {\n        LOG_ERR(\"Failed to publish message, error: %d\", ret);\n    } else {\n        LOG_INF(\"Published: %s\", state_str);\n    }\n}\n\nvoid mqtt_evt_handler(struct mqtt_client *const client, const struct mqtt_evt *evt) {\n    switch (evt->type) {\n        case MQTT_EVT_CONNACK:\n            LOG_INF(\"Connected to MQTT broker\");\n            break;\n        case MQTT_EVT_DISCONNECT:\n            LOG_INF(\"Disconnected from MQTT broker\");\n            break;\n        default:\n            break;\n    }\n}\n\nvoid mqtt_thread(void) {\n    int sock;\n    struct mqtt_client_config config;\n\n    memset(&client_ctx, 0, sizeof(client_ctx));\n    memset(&config, 0, sizeof(config));\n\n    config.client_id.utf8 = MQTT_CLIENT_ID;\n    config.client_id.size = strlen(MQTT_CLIENT_ID);\n    config.user_name.utf8 = MQTT_USERNAME;\n    config.password.utf8 = MQTT_PASSWORD;\n\n    broker.sin_family = AF_INET;\n    broker.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_ADDR, &broker.sin_addr);\n\n    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (sock < 0) {\n        LOG_ERR(\"Failed to create socket: %d\", sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&broker, sizeof(broker)) < 0) {\n        LOG_ERR(\"Failed to connect to broker\");\n        close(sock);\n        return;\n    }\n\n    client_ctx.broker = &broker;\n    client_ctx.evt_cb = mqtt_evt_handler;\n    client_ctx.client_cfg = &config;\n    client_ctx.sock = sock;\n    client_ctx.rx_buf = rx_buffer;\n    client_ctx.rx_buf_size = sizeof(rx_buffer);\n    client_ctx.tx_buf = tx_buffer;\n    client_ctx.tx_buf_size = sizeof(tx_buffer);\n\n    int ret = mqtt_connect(&client_ctx);\n    if (ret) {\n        LOG_ERR(\"Failed to connect to MQTT broker, error: %d\", ret);\n        close(sock);\n        return;\n    }\n\n    while (1) {\n        mqtt_input(&client_ctx);\n        publish_state(&client_ctx);\n        k_sleep(K_SECONDS(5));\n    }\n}\n\nK_THREAD_DEFINE(mqtt_thread_id, STACK_SIZE, mqtt_thread, NULL, NULL, NULL, PRIORITY, 0, 0);\n\nint main(void) {\n    LOG_INF(\"Starting MQTT client\");\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}