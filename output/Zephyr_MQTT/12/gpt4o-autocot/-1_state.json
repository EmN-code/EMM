{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:45:13: error: conflicting types for 'mqtt_connect'; have 'void(void)'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:57:16: error: 'struct mqtt_client' has no member named 'broker_len'; did you mean 'broker'?",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:67:15: error: too many arguments to function 'mqtt_connect'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:67:15: error: void value not ignored as it ought to be",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:80:32: error: 'struct mqtt_topic' has no member named 'utf8'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:81:32: error: 'struct mqtt_topic' has no member named 'size'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:82:34: error: 'struct mqtt_binstr' has no member named 'utf8'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:83:34: error: 'struct mqtt_binstr' has no member named 'size'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:85:18: error: 'struct mqtt_publish_param' has no member named 'dup'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:86:18: error: 'struct mqtt_publish_param' has no member named 'retain'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:87:18: error: 'struct mqtt_publish_param' has no member named 'qos'\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/mqtt.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/net/net_mgmt.h>\n#include <zephyr/net/net_if.h>\n#include <zephyr/net/wifi_mgmt.h>\n#include <zephyr/logging/log.h>\n\n#define LOG_LEVEL LOG_LEVEL_DBG\nLOG_MODULE_REGISTER(mqtt_example);\n\n#define WIFI_SSID \"your_wifi_ssid\"\n#define WIFI_PSK \"your_wifi_password\"\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_publish_param publish_param;\n\nstatic void wifi_connect(void)\n{\n    struct net_if *iface = net_if_get_default();\n    struct wifi_connect_req_params params = {\n        .ssid = WIFI_SSID,\n        .ssid_length = strlen(WIFI_SSID),\n        .psk = WIFI_PSK,\n        .psk_length = strlen(WIFI_PSK),\n        .channel = 0,\n        .security = WIFI_SECURITY_TYPE_PSK,\n    };\n\n    int ret = net_mgmt(NET_REQUEST_WIFI_CONNECT, iface, &params, sizeof(params));\n    if (ret) {\n        LOG_ERR(\"WiFi connection failed: %d\", ret);\n    } else {\n        LOG_INF(\"WiFi connected\");\n    }\n}\n\nstatic void mqtt_connect(void)\n{\n    struct sockaddr_storage broker;\n    struct sockaddr_in *broker4 = (struct sockaddr_in *)&broker;\n\n    broker4->sin_family = AF_INET;\n    broker4->sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_IP, &broker4->sin_addr);\n\n    mqtt_client_init(&client_ctx);\n\n    client_ctx.broker = (struct sockaddr *)&broker;\n    client_ctx.broker_len = sizeof(broker);\n    client_ctx.client_id.utf8 = (uint8_t *)\"zephyr_client\";\n    client_ctx.client_id.size = strlen(\"zephyr_client\");\n    client_ctx.protocol_version = MQTT_VERSION_3_1_1;\n    client_ctx.evt_cb = NULL;\n    client_ctx.rx_buf = rx_buffer;\n    client_ctx.rx_buf_size = sizeof(rx_buffer);\n    client_ctx.tx_buf = tx_buffer;\n    client_ctx.tx_buf_size = sizeof(tx_buffer);\n\n    int ret = mqtt_connect(&client_ctx);\n    if (ret) {\n        LOG_ERR(\"MQTT connection failed: %d\", ret);\n    } else {\n        LOG_INF(\"MQTT connected\");\n    }\n}\n\nstatic void publish_state(void)\n{\n    static bool state = false;\n    const char *state_str = state ? \"work\" : \"not work\";\n\n    publish_param.message.topic.utf8 = (uint8_t *)MQTT_TOPIC;\n    publish_param.message.topic.size = strlen(MQTT_TOPIC);\n    publish_param.message.payload.utf8 = (uint8_t *)state_str;\n    publish_param.message.payload.size = strlen(state_str);\n    publish_param.message_id = 0;\n    publish_param.dup = 0;\n    publish_param.retain = 0;\n    publish_param.qos = MQTT_QOS_1_AT_LEAST_ONCE;\n\n    int ret = mqtt_publish(&client_ctx, &publish_param);\n    if (ret) {\n        LOG_ERR(\"MQTT publish failed: %d\", ret);\n    } else {\n        LOG_INF(\"MQTT published: %s\", state_str);\n    }\n\n    state = !state;\n}\n\nint main(void)\n{\n    wifi_connect();\n    mqtt_connect();\n\n    while (1) {\n        publish_state();\n        k_sleep(K_SECONDS(5));\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}