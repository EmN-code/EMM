{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/socket.h>\n#include <logging/log.h>\n#include <net/mqtt.h>\n#include <net/net_context.h>\n#include <net/net_core.h>\n#include <net/net_if.h>\n#include <net/net_mgmt.h>\n#include <net/wifi_mgmt.h>\n\n#define LOG_LEVEL CONFIG_LOG_DEFAULT_LEVEL\nLOG_MODULE_REGISTER(main);\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n#define MQTT_CLIENT_ID \"esp32_client\"\n\n#define WIFI_SSID \"your_wifi_ssid\"\n#define WIFI_PASSWORD \"your_wifi_password\"\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_publish_param publish_param;\n\nstatic void wifi_connect(void) {\n    struct net_if *iface = net_if_get_default();\n    struct wifi_connect_req_params params;\n\n    params.ssid = WIFI_SSID;\n    params.ssid_length = strlen(WIFI_SSID);\n    params.psk = WIFI_PASSWORD;\n    params.psk_length = strlen(WIFI_PASSWORD);\n    params.channel = WIFI_CHANNEL_ANY;\n    params.security = WIFI_SECURITY_TYPE_PSK;\n\n    if (net_mgmt(NET_REQUEST_WIFI_CONNECT, iface, &params, sizeof(params))) {\n        LOG_ERR(\"WiFi connection failed\");\n    } else {\n        LOG_INF(\"WiFi connected\");\n    }\n}\n\nstatic void mqtt_evt_handler(struct mqtt_client *const client,\n                             const struct mqtt_evt *evt) {\n    switch (evt->type) {\n        case MQTT_EVT_CONNACK:\n            LOG_INF(\"MQTT client connected\");\n            break;\n        case MQTT_EVT_DISCONNECT:\n            LOG_INF(\"MQTT client disconnected\");\n            break;\n        default:\n            break;\n    }\n}\n\nstatic void mqtt_publish(const char *message) {\n    int ret;\n    struct mqtt_client_config cfg;\n\n    memset(&cfg, 0, sizeof(cfg));\n    cfg.client_id = MQTT_CLIENT_ID;\n    cfg.broker = MQTT_BROKER_IP;\n    cfg.port = MQTT_BROKER_PORT;\n\n    mqtt_client_init(&client_ctx);\n    client_ctx.config = &cfg;\n    client_ctx.evt_cb = mqtt_evt_handler;\n\n    ret = mqtt_connect(&client_ctx);\n    if (ret) {\n        LOG_ERR(\"MQTT connect failed: %d\", ret);\n        return;\n    }\n\n    publish_param.message.topic.qos = MQTT_QOS_1_AT_LEAST_ONCE;\n    publish_param.message.topic.topic.utf8 = MQTT_TOPIC;\n    publish_param.message.topic.topic.size = strlen(MQTT_TOPIC);\n    publish_param.message.payload.data = message;\n    publish_param.message.payload.len = strlen(message);\n    publish_param.message_id = 1U;\n\n    ret = mqtt_publish(&client_ctx, &publish_param);\n    if (ret) {\n        LOG_ERR(\"MQTT publish failed: %d\", ret);\n    } else {\n        LOG_INF(\"MQTT message published: %s\", message);\n    }\n\n    mqtt_disconnect(&client_ctx);\n}\n\nvoid main(void) {\n    wifi_connect();\n\n    while (1) {\n        mqtt_publish(\"work\");\n        k_sleep(K_SECONDS(5));\n        mqtt_publish(\"not work\");\n        k_sleep(K_SECONDS(5));\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}