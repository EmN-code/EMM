{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/socket.h>\n#include <net/mqtt.h>\n#include <logging/log.h>\n#include <string.h>\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n#define MQTT_CLIENT_ID \"esp32_client\"\n#define MQTT_USERNAME NULL\n#define MQTT_PASSWORD NULL\n\nLOG_MODULE_REGISTER(mqtt_client);\n\nstatic int mqtt_connect(struct mqtt_client *client)\n{\n    struct sockaddr_in broker;\n\n    broker.sin_family = AF_INET;\n    broker.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_IP, &broker.sin_addr);\n\n    client->broker = &broker;\n    client->client_id.utf8 = (u8_t *)MQTT_CLIENT_ID;\n    client->client_id.size = strlen(MQTT_CLIENT_ID);\n    client->user_name.utf8 = (u8_t *)MQTT_USERNAME;\n    client->user_name.size = MQTT_USERNAME ? strlen(MQTT_USERNAME) : 0;\n    client->password.utf8 = (u8_t *)MQTT_PASSWORD;\n    client->password.size = MQTT_PASSWORD ? strlen(MQTT_PASSWORD) : 0;\n\n    return mqtt_connect_async(client);\n}\n\nstatic void mqtt_event_handler(struct mqtt_client *const client,\n                               const struct mqtt_evt *evt)\n{\n    switch (evt->type) {\n    case MQTT_EVT_CONNACK:\n        LOG_INF(\"MQTT client connected!\");\n        break;\n    case MQTT_EVT_DISCONNECT:\n        LOG_INF(\"MQTT client disconnected!\");\n        break;\n    default:\n        break;\n    }\n}\n\nstatic void publish_state(struct mqtt_client *client)\n{\n    static bool state = false;\n    const char *state_str = state ? \"work\" : \"not work\";\n    struct mqtt_publish_param param;\n\n    param.message.topic.utf8 = (u8_t *)MQTT_TOPIC;\n    param.message.topic.size = strlen(MQTT_TOPIC);\n    param.message.payload.utf8 = (u8_t *)state_str;\n    param.message.payload.size = strlen(state_str);\n    param.message_id = 0;\n    param.dup_flag = 0;\n    param.retain_flag = 0;\n    param.qos = MQTT_QOS_0_AT_MOST_ONCE;\n\n    mqtt_publish(client, &param);\n\n    state = !state;\n}\n\nvoid main(void)\n{\n    struct mqtt_client client;\n    mqtt_client_init(&client);\n\n    if (mqtt_connect(&client) != 0) {\n        LOG_ERR(\"Failed to connect to MQTT broker\");\n        return;\n    }\n\n    client.evt_cb = mqtt_event_handler;\n\n    while (1) {\n        mqtt_input(&client);\n        if (client.is_connected) {\n            publish_state(&client);\n        }\n        k_sleep(K_SECONDS(5));\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}