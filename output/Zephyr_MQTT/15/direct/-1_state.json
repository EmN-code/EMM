{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/socket.h>\n#include <net/mqtt.h>\n#include <logging/log.h>\n#include <string.h>\n\n#define MQTT_BROKER_ADDR \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n#define MQTT_CLIENT_ID \"esp32_client\"\n#define MQTT_USERNAME NULL\n#define MQTT_PASSWORD NULL\n\n#define STACK_SIZE 1024\n#define PRIORITY 7\n\nLOG_MODULE_REGISTER(mqtt_client);\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_tx_buf tx_buf;\nstatic struct mqtt_rx_buf rx_buf;\n\nstatic int connect_mqtt(void) {\n    int ret;\n    struct sockaddr_in broker;\n\n    memset(&broker, 0, sizeof(broker));\n    broker.sin_family = AF_INET;\n    broker.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_ADDR, &broker.sin_addr);\n\n    int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (sock < 0) {\n        LOG_ERR(\"Failed to create socket: %d\", errno);\n        return -errno;\n    }\n\n    ret = connect(sock, (struct sockaddr *)&broker, sizeof(broker));\n    if (ret < 0) {\n        LOG_ERR(\"Failed to connect to broker: %d\", errno);\n        close(sock);\n        return -errno;\n    }\n\n    mqtt_client_init(&client_ctx);\n\n    client_ctx.broker = &broker;\n    client_ctx.broker_len = sizeof(broker);\n    client_ctx.client_id.utf8 = (uint8_t *)MQTT_CLIENT_ID;\n    client_ctx.client_id.size = strlen(MQTT_CLIENT_ID);\n    client_ctx.password = (uint8_t *)MQTT_PASSWORD;\n    client_ctx.password_len = MQTT_PASSWORD ? strlen(MQTT_PASSWORD) : 0;\n    client_ctx.user_name = (uint8_t *)MQTT_USERNAME;\n    client_ctx.user_name_len = MQTT_USERNAME ? strlen(MQTT_USERNAME) : 0;\n    client_ctx.protocol_version = MQTT_VERSION_3_1_1;\n    client_ctx.clean_session = 1;\n    client_ctx.keepalive = 60;\n    client_ctx.socket = sock;\n    client_ctx.tls_config = NULL;\n\n    ret = mqtt_connect(&client_ctx);\n    if (ret < 0) {\n        LOG_ERR(\"MQTT connect failed: %d\", ret);\n        close(sock);\n        return ret;\n    }\n\n    return 0;\n}\n\nstatic int publish_state(const char *state) {\n    int ret;\n    struct mqtt_publish_param param;\n\n    param.message.topic.utf8 = (uint8_t *)MQTT_TOPIC;\n    param.message.topic.size = strlen(MQTT_TOPIC);\n    param.message.payload.utf8 = (uint8_t *)state;\n    param.message.payload.size = strlen(state);\n    param.message_id = 0;\n    param.dup_flag = 0;\n    param.retain_flag = 0;\n    param.qos = MQTT_QOS_0_AT_MOST_ONCE;\n\n    ret = mqtt_publish(&client_ctx, &param);\n    if (ret < 0) {\n        LOG_ERR(\"MQTT publish failed: %d\", ret);\n        return ret;\n    }\n\n    return 0;\n}\n\nvoid main(void) {\n    int ret;\n\n    ret = connect_mqtt();\n    if (ret < 0) {\n        LOG_ERR(\"Failed to connect to MQTT broker\");\n        return;\n    }\n\n    while (1) {\n        ret = publish_state(\"work\");\n        if (ret < 0) {\n            LOG_ERR(\"Failed to publish state\");\n        }\n\n        k_sleep(K_SECONDS(5));\n\n        ret = publish_state(\"not work\");\n        if (ret < 0) {\n            LOG_ERR(\"Failed to publish state\");\n        }\n\n        k_sleep(K_SECONDS(5));\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}