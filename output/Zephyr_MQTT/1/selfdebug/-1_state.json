{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ],
        [
            "user",
            "Now, try again. Check the error information: ['E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\\r'] and Invoke the code tool to solve the error and structure the output with a prefix and code block."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/socket.h>\n#include <net/mqtt.h>\n#include <logging/log.h>\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"state\"\n#define MQTT_PAYLOAD \"work\"\n\nLOG_MODULE_REGISTER(main);\n\nvoid mqtt_event_handler(struct mqtt_client *const client,\n                        const struct mqtt_evt *evt)\n{\n    switch (evt->type) {\n        case MQTT_EVT_CONNACK:\n            if (evt->result == 0) {\n                LOG_INF(\"Connected to MQTT broker\");\n            } else {\n                LOG_ERR(\"Failed to connect to MQTT broker: %d\", evt->result);\n            }\n            break;\n        case MQTT_EVT_DISCONNECT:\n            LOG_INF(\"Disconnected from MQTT broker\");\n            break;\n        default:\n            break;\n    }\n}\n\nvoid publish_state(struct mqtt_client *client)\n{\n    struct mqtt_publish_param param;\n    static char payload[] = MQTT_PAYLOAD;\n\n    param.message.topic.qos = MQTT_QOS_1_AT_LEAST_ONCE;\n    param.message.topic.topic.utf8 = MQTT_TOPIC;\n    param.message.topic.topic.size = strlen(MQTT_TOPIC);\n    param.message.payload.data = payload;\n    param.message.payload.len = strlen(payload);\n    param.message_id = sys_rand32_get();\n    param.dup_flag = 0;\n    param.retain_flag = 0;\n\n    int ret = mqtt_publish(client, &param);\n    if (ret) {\n        LOG_ERR(\"Failed to publish message: %d\", ret);\n    } else {\n        LOG_INF(\"Message published\");\n    }\n}\n\nvoid main(void)\n{\n    struct mqtt_client client;\n    struct mqtt_client_config config;\n    struct sockaddr_in broker;\n    int sock;\n\n    memset(&client, 0, sizeof(client));\n    memset(&config, 0, sizeof(config));\n\n    config.client_id.utf8 = \"zephyr_client\";\n    config.client_id.size = strlen(config.client_id.utf8);\n    config.keepalive = 60;\n    config.clean_session = 1;\n\n    client.broker = &broker;\n    client.evt_cb = mqtt_event_handler;\n    client.config = &config;\n\n    broker.sin_family = AF_INET;\n    broker.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_IP, &broker.sin_addr);\n\n    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (sock < 0) {\n        LOG_ERR(\"Failed to create socket: %d\", sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&broker, sizeof(broker)) < 0) {\n        LOG_ERR(\"Failed to connect to MQTT broker\");\n        close(sock);\n        return;\n    }\n\n    client.transport.type = MQTT_TRANSPORT_NON_SECURE;\n    client.transport.tcp.sock = sock;\n\n    int ret = mqtt_connect(&client);\n    if (ret) {\n        LOG_ERR(\"Failed to connect to MQTT broker: %d\", ret);\n        close(sock);\n        return;\n    }\n\n    while (1) {\n        k_sleep(K_SECONDS(5));\n        publish_state(&client);\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 11
}