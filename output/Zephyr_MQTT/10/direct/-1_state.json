{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/mqtt.h>\n#include <net/socket.h>\n#include <logging/log.h>\n#include <string.h>\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n#define MQTT_CLIENT_ID \"esp32_client\"\n#define MQTT_USERNAME NULL\n#define MQTT_PASSWORD NULL\n\nLOG_MODULE_REGISTER(main);\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_client_config config;\nstatic struct sockaddr_in broker;\n\nvoid mqtt_evt_handler(struct mqtt_client *const client,\n                      const struct mqtt_evt *evt)\n{\n    switch (evt->type) {\n        case MQTT_EVT_CONNACK:\n            LOG_INF(\"MQTT client connected!\");\n            break;\n        case MQTT_EVT_DISCONNECT:\n            LOG_INF(\"MQTT client disconnected!\");\n            break;\n        default:\n            break;\n    }\n}\n\nvoid publish_state(struct mqtt_client *client, const char *state)\n{\n    struct mqtt_publish_param param;\n    param.message.topic.qos = MQTT_QOS_1_AT_LEAST_ONCE;\n    param.message.topic.topic.utf8 = MQTT_TOPIC;\n    param.message.topic.topic.size = strlen(MQTT_TOPIC);\n    param.message.payload.data = state;\n    param.message.payload.len = strlen(state);\n    param.message_id = sys_rand32_get();\n    param.dup_flag = 0;\n    param.retain_flag = 0;\n\n    int ret = mqtt_publish(client, &param);\n    if (ret) {\n        LOG_ERR(\"Failed to publish message, error: %d\", ret);\n    } else {\n        LOG_INF(\"Published state: %s\", state);\n    }\n}\n\nvoid main(void)\n{\n    int sock;\n    int ret;\n\n    memset(&client_ctx, 0, sizeof(client_ctx));\n    memset(&config, 0, sizeof(config));\n\n    broker.sin_family = AF_INET;\n    broker.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_IP, &broker.sin_addr);\n\n    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (sock < 0) {\n        LOG_ERR(\"Failed to create socket: %d\", sock);\n        return;\n    }\n\n    ret = connect(sock, (struct sockaddr *)&broker, sizeof(broker));\n    if (ret < 0) {\n        LOG_ERR(\"Failed to connect to broker: %d\", ret);\n        close(sock);\n        return;\n    }\n\n    config.client_id.utf8 = MQTT_CLIENT_ID;\n    config.client_id.size = strlen(MQTT_CLIENT_ID);\n    config.user_name.utf8 = MQTT_USERNAME;\n    config.password.utf8 = MQTT_PASSWORD;\n    config.keepalive = 60;\n    config.clean_session = true;\n    config.store = NULL;\n    config.evt_cb = mqtt_evt_handler;\n\n    mqtt_client_init(&client_ctx);\n    ret = mqtt_connect(&client_ctx, &config, sock, rx_buffer, sizeof(rx_buffer), tx_buffer, sizeof(tx_buffer));\n    if (ret) {\n        LOG_ERR(\"Failed to connect to MQTT broker: %d\", ret);\n        close(sock);\n        return;\n    }\n\n    while (1) {\n        publish_state(&client_ctx, \"work\");\n        k_sleep(K_SECONDS(5));\n        publish_state(&client_ctx, \"not work\");\n        k_sleep(K_SECONDS(5));\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}