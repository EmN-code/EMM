{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ],
        [
            "user",
            "Now, try again. Check the error information: ['E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\\r'] and Invoke the code tool to solve the error and structure the output with a prefix and code block."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/socket.h>\n#include <net/mqtt.h>\n#include <logging/log.h>\n\nLOG_MODULE_REGISTER(mqtt_client);\n\n#define MQTT_BROKER_ADDR \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"state\"\n#define MQTT_MESSAGE \"work or not work\"\n\nstatic int mqtt_connect(struct mqtt_client *client)\n{\n    struct sockaddr_storage broker;\n    int ret;\n\n    broker.sa_family = AF_INET;\n    ((struct sockaddr_in *)&broker)->sin_port = htons(MQTT_BROKER_PORT);\n    ret = inet_pton(AF_INET, MQTT_BROKER_ADDR, &((struct sockaddr_in *)&broker)->sin_addr);\n    if (ret < 0) {\n        LOG_ERR(\"Invalid address\");\n        return ret;\n    }\n\n    client->broker = &broker;\n    client->evt_cb = NULL;\n    client->client_id.utf8 = \"esp32_client\";\n    client->client_id.size = strlen(\"esp32_client\");\n\n    ret = mqtt_connect(client);\n    if (ret < 0) {\n        LOG_ERR(\"Failed to connect to MQTT broker: %d\", ret);\n        return ret;\n    }\n\n    return 0;\n}\n\nstatic void mqtt_publish(struct mqtt_client *client)\n{\n    struct mqtt_publish_param param;\n\n    param.message.topic.topic.utf8 = MQTT_TOPIC;\n    param.message.topic.topic.size = strlen(MQTT_TOPIC);\n    param.message.payload.data = MQTT_MESSAGE;\n    param.message.payload.len = strlen(MQTT_MESSAGE);\n    param.message_id = 0;\n    param.dup_flag = 0;\n    param.retain_flag = 0;\n\n    int ret = mqtt_publish(client, &param);\n    if (ret < 0) {\n        LOG_ERR(\"Failed to publish message: %d\", ret);\n    } else {\n        LOG_INF(\"Message published\");\n    }\n}\n\nvoid main(void)\n{\n    struct mqtt_client client;\n    uint8_t rx_buffer[100];\n    uint8_t tx_buffer[100];\n    int ret;\n\n    memset(&client, 0, sizeof(client));\n    client.transport.type = MQTT_TRANSPORT_NON_SECURE;\n    client.rx_buf = rx_buffer;\n    client.rx_buf_size = sizeof(rx_buffer);\n    client.tx_buf = tx_buffer;\n    client.tx_buf_size = sizeof(tx_buffer);\n\n    ret = mqtt_connect(&client);\n    if (ret < 0) {\n        LOG_ERR(\"MQTT connect failed: %d\", ret);\n        return;\n    }\n\n    while (1) {\n        mqtt_publish(&client);\n        k_sleep(K_SECONDS(5));\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 11
}