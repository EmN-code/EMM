{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/socket.h>\n#include <logging/log.h>\n#include <net/mqtt.h>\n#include <net/net_context.h>\n#include <net/net_mgmt.h>\n#include <net/net_if.h>\n#include <net/wifi_mgmt.h>\n\n#define LOG_LEVEL LOG_LEVEL_DBG\nLOG_MODULE_REGISTER(mqtt_example);\n\n#define MQTT_BROKER_ADDR \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"state\"\n#define MQTT_CLIENT_ID \"zephyr_esp32\"\n\n#define WIFI_SSID \"your_wifi_ssid\"\n#define WIFI_PSK \"your_wifi_password\"\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_utf8 topic;\nstatic struct mqtt_client_config mqtt_conf;\n\nstatic void wifi_mgmt_event_handler(struct net_mgmt_event_callback *cb,\n                                    uint32_t mgmt_event, struct net_if *iface)\n{\n    if (mgmt_event != NET_EVENT_WIFI_CONNECT_RESULT) {\n        return;\n    }\n\n    if (cb->info->status == 0) {\n        LOG_INF(\"Connected to WiFi\");\n    } else {\n        LOG_ERR(\"Failed to connect to WiFi\");\n    }\n}\n\nstatic void mqtt_evt_handler(struct mqtt_client *const client,\n                             const struct mqtt_evt *evt)\n{\n    switch (evt->type) {\n    case MQTT_EVT_CONNACK:\n        if (evt->result != 0) {\n            LOG_ERR(\"MQTT connect failed %d\", evt->result);\n        } else {\n            LOG_INF(\"MQTT connected\");\n        }\n        break;\n    case MQTT_EVT_DISCONNECT:\n        LOG_INF(\"MQTT disconnected\");\n        break;\n    default:\n        break;\n    }\n}\n\nstatic void connect_to_wifi(void)\n{\n    struct net_if *iface = net_if_get_default();\n    struct net_mgmt_event_callback wifi_mgmt_cb;\n    struct wifi_connect_req_params wifi_params;\n\n    net_mgmt_init_event_callback(&wifi_mgmt_cb, wifi_mgmt_event_handler,\n                                 NET_EVENT_WIFI_CONNECT_RESULT);\n    net_mgmt_add_event_callback(&wifi_mgmt_cb);\n\n    wifi_params.ssid = WIFI_SSID;\n    wifi_params.ssid_length = strlen(WIFI_SSID);\n    wifi_params.psk = WIFI_PSK;\n    wifi_params.psk_length = strlen(WIFI_PSK);\n    wifi_params.channel = WIFI_CHANNEL_ANY;\n    wifi_params.security = WIFI_SECURITY_TYPE_PSK;\n\n    if (net_mgmt(NET_REQUEST_WIFI_CONNECT, iface, &wifi_params, sizeof(wifi_params))) {\n        LOG_ERR(\"WiFi connection request failed\");\n    }\n}\n\nstatic void connect_to_mqtt(void)\n{\n    int rc;\n    struct sockaddr_in broker;\n\n    memset(&client_ctx, 0, sizeof(client_ctx));\n    memset(&mqtt_conf, 0, sizeof(mqtt_conf));\n\n    mqtt_conf.client_id = MQTT_CLIENT_ID;\n    mqtt_conf.user_name = NULL;\n    mqtt_conf.password = NULL;\n    mqtt_conf.keepalive = 60;\n    mqtt_conf.clean_session = true;\n    mqtt_conf.resv = 0;\n\n    broker.sin_family = AF_INET;\n    broker.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_ADDR, &broker.sin_addr);\n\n    rc = mqtt_client_init(&client_ctx, &mqtt_conf, rx_buffer, sizeof(rx_buffer),\n                          tx_buffer, sizeof(tx_buffer), mqtt_evt_handler);\n    if (rc != 0) {\n        LOG_ERR(\"Failed to initialize MQTT client: %d\", rc);\n        return;\n    }\n\n    rc = mqtt_connect(&client_ctx, (struct sockaddr *)&broker, NULL, NULL, NULL);\n    if (rc != 0) {\n        LOG_ERR(\"MQTT connect failed: %d\", rc);\n    }\n}\n\nstatic void publish_state(void)\n{\n    int rc;\n    static bool state = false;\n    const char *state_str = state ? \"work\" : \"not work\";\n\n    topic.utf8 = MQTT_TOPIC;\n    topic.size = strlen(MQTT_TOPIC);\n\n    rc = mqtt_publish(&client_ctx, &topic, state_str, strlen(state_str), MQTT_QOS_0_AT_MOST_ONCE, false);\n    if (rc != 0) {\n        LOG_ERR(\"MQTT publish failed: %d\", rc);\n    } else {\n        LOG_INF(\"Published state: %s\", state_str);\n    }\n\n    state = !state;\n}\n\nvoid main(void)\n{\n    connect_to_wifi();\n    k_sleep(K_SECONDS(10)); // Wait for WiFi connection\n    connect_to_mqtt();\n\n    while (1) {\n        k_sleep(K_SECONDS(5));\n        publish_state();\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}