{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ],
        [
            "user",
            "Now, try again. Check the error information: ['E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\\r'] and Invoke the code tool to solve the error and structure the output with a prefix and code block."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/socket.h>\n#include <logging/log.h>\n#include <net/mqtt.h>\n#include <string.h>\n\n#define LOG_LEVEL LOG_LEVEL_DBG\nLOG_MODULE_REGISTER(main);\n\n#define MQTT_BROKER_ADDR \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"state\"\n#define MQTT_PAYLOAD \"work\"\n\nstruct mqtt_client client_ctx;\nuint8_t rx_buffer[100];\nuint8_t tx_buffer[100];\n\nvoid mqtt_evt_handler(struct mqtt_client *const client,\n                      const struct mqtt_evt *evt)\n{\n    switch (evt->type) {\n    case MQTT_EVT_CONNACK:\n        if (evt->result != 0) {\n            LOG_ERR(\"Connection error: %d\", evt->result);\n        } else {\n            LOG_INF(\"Connected to broker\");\n        }\n        break;\n    case MQTT_EVT_DISCONNECT:\n        LOG_INF(\"Disconnected from broker\");\n        break;\n    default:\n        break;\n    }\n}\n\nvoid publish_state(struct mqtt_client *client)\n{\n    struct mqtt_publish_param param;\n    struct mqtt_topic topic = {\n        .topic.utf8 = MQTT_TOPIC,\n        .topic.size = strlen(MQTT_TOPIC),\n    };\n\n    param.message.topic = topic;\n    param.message.payload.data = MQTT_PAYLOAD;\n    param.message.payload.len = strlen(MQTT_PAYLOAD);\n    param.message_id = 1;\n    param.dup_flag = 0;\n    param.retain_flag = 0;\n\n    int ret = mqtt_publish(client, &param);\n    if (ret) {\n        LOG_ERR(\"Failed to publish message: %d\", ret);\n    } else {\n        LOG_INF(\"Message published\");\n    }\n}\n\nvoid main(void)\n{\n    struct sockaddr_in broker;\n    int ret;\n\n    memset(&client_ctx, 0, sizeof(client_ctx));\n\n    client_ctx.broker = &broker;\n    client_ctx.evt_cb = mqtt_evt_handler;\n    client_ctx.rx_buf = rx_buffer;\n    client_ctx.rx_buf_size = sizeof(rx_buffer);\n    client_ctx.tx_buf = tx_buffer;\n    client_ctx.tx_buf_size = sizeof(tx_buffer);\n\n    broker.sin_family = AF_INET;\n    broker.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_ADDR, &broker.sin_addr);\n\n    ret = mqtt_connect(&client_ctx);\n    if (ret) {\n        LOG_ERR(\"Failed to connect to broker: %d\", ret);\n        return;\n    }\n\n    while (1) {\n        k_sleep(K_SECONDS(5));\n        publish_state(&client_ctx);\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 11
}