{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <net/socket.h>\n#include <logging/log.h>\n#include <net/mqtt.h>\n#include <net/net_context.h>\n#include <net/net_mgmt.h>\n#include <net/net_if.h>\n#include <net/wifi_mgmt.h>\n\n#define LOG_LEVEL CONFIG_LOG_DEFAULT_LEVEL\nLOG_MODULE_REGISTER(main);\n\n#define MQTT_BROKER_ADDR \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n#define MQTT_CLIENT_ID \"esp32_client\"\n\n#define WIFI_SSID \"your_wifi_ssid\"\n#define WIFI_PSK \"your_wifi_password\"\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_utf8 topic;\nstatic struct mqtt_client_config mqtt_conf;\n\nstatic void wifi_mgmt_event_handler(struct net_mgmt_event_callback *cb, uint32_t mgmt_event, struct net_if *iface)\n{\n    if (mgmt_event == NET_EVENT_WIFI_CONNECT_RESULT) {\n        LOG_INF(\"WiFi connected\");\n    } else if (mgmt_event == NET_EVENT_WIFI_DISCONNECT_RESULT) {\n        LOG_INF(\"WiFi disconnected\");\n    }\n}\n\nstatic void mqtt_evt_handler(struct mqtt_client *const client, const struct mqtt_evt *evt)\n{\n    switch (evt->type) {\n        case MQTT_EVT_CONNACK:\n            LOG_INF(\"MQTT connected\");\n            break;\n        case MQTT_EVT_DISCONNECT:\n            LOG_INF(\"MQTT disconnected\");\n            break;\n        default:\n            break;\n    }\n}\n\nstatic int connect_to_mqtt_broker(void)\n{\n    int ret;\n    struct sockaddr_in broker;\n\n    memset(&broker, 0, sizeof(broker));\n    broker.sin_family = AF_INET;\n    broker.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_ADDR, &broker.sin_addr);\n\n    ret = mqtt_client_init(&client_ctx);\n    if (ret) {\n        LOG_ERR(\"Failed to initialize MQTT client: %d\", ret);\n        return ret;\n    }\n\n    mqtt_conf.client_id = MQTT_CLIENT_ID;\n    mqtt_conf.user_name = NULL;\n    mqtt_conf.password = NULL;\n    mqtt_conf.keep_alive = 60;\n    mqtt_conf.clean_session = true;\n    mqtt_conf.will_topic = NULL;\n    mqtt_conf.will_msg = NULL;\n    mqtt_conf.will_qos = 0;\n    mqtt_conf.will_retain = false;\n\n    ret = mqtt_connect(&client_ctx, (struct sockaddr *)&broker, &mqtt_conf, mqtt_evt_handler);\n    if (ret) {\n        LOG_ERR(\"Failed to connect to MQTT broker: %d\", ret);\n        return ret;\n    }\n\n    return 0;\n}\n\nstatic int publish_state(const char *state)\n{\n    int ret;\n    struct mqtt_publish_param param;\n\n    topic.utf8 = MQTT_TOPIC;\n    topic.size = strlen(MQTT_TOPIC);\n\n    param.message.topic = &topic;\n    param.message.payload.data = state;\n    param.message.payload.len = strlen(state);\n    param.message_id = 0;\n    param.dup_flag = 0;\n    param.retain_flag = 0;\n    param.qos = MQTT_QOS_0_AT_MOST_ONCE;\n\n    ret = mqtt_publish(&client_ctx, &param);\n    if (ret) {\n        LOG_ERR(\"Failed to publish message: %d\", ret);\n        return ret;\n    }\n\n    return 0;\n}\n\nvoid main(void)\n{\n    struct net_mgmt_event_callback wifi_cb;\n    struct net_if *iface;\n    struct wifi_connect_req_params wifi_params;\n\n    net_mgmt_init_event_callback(&wifi_cb, wifi_mgmt_event_handler, NET_EVENT_WIFI_CONNECT_RESULT | NET_EVENT_WIFI_DISCONNECT_RESULT);\n    net_mgmt_add_event_callback(&wifi_cb);\n\n    iface = net_if_get_default();\n    if (!iface) {\n        LOG_ERR(\"No default network interface\");\n        return;\n    }\n\n    wifi_params.ssid = WIFI_SSID;\n    wifi_params.ssid_length = strlen(WIFI_SSID);\n    wifi_params.psk = WIFI_PSK;\n    wifi_params.psk_length = strlen(WIFI_PSK);\n    wifi_params.channel = WIFI_CHANNEL_ANY;\n    wifi_params.security = WIFI_SECURITY_TYPE_PSK;\n\n    if (net_mgmt(NET_REQUEST_WIFI_CONNECT, iface, &wifi_params, sizeof(struct wifi_connect_req_params))) {\n        LOG_ERR(\"Failed to connect to WiFi\");\n        return;\n    }\n\n    k_sleep(K_SECONDS(10)); // Wait for WiFi to connect\n\n    if (connect_to_mqtt_broker()) {\n        return;\n    }\n\n    while (1) {\n        publish_state(\"work\");\n        k_sleep(K_SECONDS(5));\n        publish_state(\"not work\");\n        k_sleep(K_SECONDS(5));\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}