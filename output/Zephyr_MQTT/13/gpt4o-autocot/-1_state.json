{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:7:10: fatal error: zephyr/drivers/wifi.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/mqtt.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/net/wifi_mgmt.h>\n#include <zephyr/device.h>\n#include <zephyr/drivers/wifi.h>\n#include <zephyr/sys/printk.h>\n\n#define WIFI_SSID \"your_wifi_ssid\"\n#define WIFI_PSK \"your_wifi_password\"\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_utf8 topic;\nstatic struct mqtt_client_config config;\nstatic struct mqtt_client_conn_info conn_info;\n\nstatic void wifi_connect(void) {\n    struct net_if *iface = net_if_get_default();\n    struct wifi_connect_req_params params = {\n        .ssid = WIFI_SSID,\n        .ssid_length = strlen(WIFI_SSID),\n        .psk = WIFI_PSK,\n        .psk_length = strlen(WIFI_PSK),\n        .channel = 0,\n        .security = WIFI_SECURITY_TYPE_PSK,\n    };\n\n    if (net_mgmt(NET_REQUEST_WIFI_CONNECT, iface, &params, sizeof(params))) {\n        printk(\"WiFi connection failed\\n\");\n    } else {\n        printk(\"WiFi connected\\n\");\n    }\n}\n\nstatic void mqtt_connect(void) {\n    int rc;\n    struct sockaddr_in broker_addr = {\n        .sin_family = AF_INET,\n        .sin_port = htons(MQTT_BROKER_PORT),\n    };\n\n    inet_pton(AF_INET, MQTT_BROKER_IP, &broker_addr.sin_addr);\n\n    memset(&client_ctx, 0, sizeof(client_ctx));\n    client_ctx.broker = &broker_addr;\n    client_ctx.client_id.utf8 = (uint8_t *)\"zephyr_client\";\n    client_ctx.client_id.size = strlen(\"zephyr_client\");\n    client_ctx.protocol_version = MQTT_VERSION_3_1_1;\n    client_ctx.evt_cb = NULL;\n    client_ctx.rx_buf = rx_buffer;\n    client_ctx.rx_buf_size = sizeof(rx_buffer);\n    client_ctx.tx_buf = tx_buffer;\n    client_ctx.tx_buf_size = sizeof(tx_buffer);\n\n    rc = mqtt_connect(&client_ctx);\n    if (rc) {\n        printk(\"MQTT connect failed: %d\\n\", rc);\n    } else {\n        printk(\"MQTT connected\\n\");\n    }\n}\n\nstatic void mqtt_publish(const char *state) {\n    struct mqtt_publish_param param;\n\n    topic.utf8 = (uint8_t *)MQTT_TOPIC;\n    topic.size = strlen(MQTT_TOPIC);\n\n    param.message.topic = topic;\n    param.message.payload.data = (uint8_t *)state;\n    param.message.payload.len = strlen(state);\n    param.message_id = 1U;\n    param.dup_flag = 0U;\n    param.retain_flag = 0U;\n    param.qos = MQTT_QOS_1_AT_LEAST_ONCE;\n\n    int rc = mqtt_publish(&client_ctx, &param);\n    if (rc) {\n        printk(\"MQTT publish failed: %d\\n\", rc);\n    } else {\n        printk(\"MQTT published: %s\\n\", state);\n    }\n}\n\nint main(void) {\n    wifi_connect();\n    mqtt_connect();\n\n    while (1) {\n        mqtt_publish(\"work\");\n        k_sleep(K_SECONDS(5));\n        mqtt_publish(\"not work\");\n        k_sleep(K_SECONDS(5));\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}