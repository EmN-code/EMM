{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:57:13: error: conflicting types for 'mqtt_publish'; have 'void(void)'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:68:9: error: too many arguments to function 'mqtt_publish'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:68:9: error: void value not ignored as it ought to be\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/device.h>\n#include <zephyr/drivers/gpio.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/net/mqtt.h>\n#include <zephyr/net/net_mgmt.h>\n#include <zephyr/net/net_if.h>\n#include <zephyr/net/wifi_mgmt.h>\n\n#define WIFI_SSID \"your_wifi_ssid\"\n#define WIFI_PSK \"your_wifi_password\"\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"state\"\n\n#define SLEEP_TIME_MS 5000\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_publish_param publish_param;\n\nstatic void wifi_connect(void) {\n    struct net_if *iface = net_if_get_default();\n    struct wifi_connect_req_params params = {\n        .ssid = WIFI_SSID,\n        .ssid_length = strlen(WIFI_SSID),\n        .psk = WIFI_PSK,\n        .psk_length = strlen(WIFI_PSK),\n        .channel = 0,\n        .security = WIFI_SECURITY_TYPE_PSK,\n    };\n\n    if (net_mgmt(NET_REQUEST_WIFI_CONNECT, iface, &params, sizeof(params))) {\n        printk(\"WiFi connection failed\\n\");\n    } else {\n        printk(\"WiFi connected\\n\");\n    }\n}\n\nstatic void mqtt_evt_handler(struct mqtt_client *const client,\n                             const struct mqtt_evt *evt) {\n    switch (evt->type) {\n        case MQTT_EVT_CONNACK:\n            printk(\"MQTT connected\\n\");\n            break;\n        case MQTT_EVT_DISCONNECT:\n            printk(\"MQTT disconnected\\n\");\n            break;\n        default:\n            break;\n    }\n}\n\nstatic void mqtt_publish(void) {\n    static bool state = false;\n    const char *state_str = state ? \"work\" : \"not work\";\n    state = !state;\n\n    publish_param.message.topic.qos = MQTT_QOS_1_AT_LEAST_ONCE;\n    publish_param.message.topic.topic.utf8 = MQTT_TOPIC;\n    publish_param.message.topic.topic.size = strlen(MQTT_TOPIC);\n    publish_param.message.payload.data = state_str;\n    publish_param.message.payload.len = strlen(state_str);\n\n    if (mqtt_publish(&client_ctx, &publish_param) < 0) {\n        printk(\"MQTT publish failed\\n\");\n    } else {\n        printk(\"MQTT published: %s\\n\", state_str);\n    }\n}\n\nint main(void) {\n    struct sockaddr_storage broker;\n    struct sockaddr_in *broker4 = (struct sockaddr_in *)&broker;\n\n    wifi_connect();\n\n    broker4->sin_family = AF_INET;\n    broker4->sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_IP, &broker4->sin_addr);\n\n    mqtt_client_init(&client_ctx);\n    client_ctx.broker = (struct sockaddr *)&broker;\n    client_ctx.evt_cb = mqtt_evt_handler;\n    client_ctx.client_id.utf8 = \"zephyr_client\";\n    client_ctx.client_id.size = strlen(\"zephyr_client\");\n    client_ctx.password = NULL;\n    client_ctx.user_name = NULL;\n    client_ctx.protocol_version = MQTT_VERSION_3_1_1;\n\n    if (mqtt_connect(&client_ctx) < 0) {\n        printk(\"MQTT connect failed\\n\");\n        return -1;\n    }\n\n    while (1) {\n        mqtt_publish();\n        k_sleep(K_MSEC(SLEEP_TIME_MS));\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}