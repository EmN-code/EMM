{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:80:32: error: 'struct mqtt_topic' has no member named 'utf8'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:81:32: error: 'struct mqtt_topic' has no member named 'size'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:82:34: error: 'struct mqtt_binstr' has no member named 'utf8'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:83:34: error: 'struct mqtt_binstr' has no member named 'size'",
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:87:18: error: 'struct mqtt_publish_param' has no member named 'qos'"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/device.h>\n#include <zephyr/drivers/gpio.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/net/mqtt.h>\n#include <zephyr/net/net_mgmt.h>\n#include <zephyr/net/net_if.h>\n#include <zephyr/net/wifi_mgmt.h>\n\n#define WIFI_SSID \"your_wifi_ssid\"\n#define WIFI_PSK \"your_wifi_password\"\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"state\"\n\n#define SLEEP_TIME_MS   5000\n\nstatic struct mqtt_client client_ctx;\nstatic uint8_t rx_buffer[100];\nstatic uint8_t tx_buffer[100];\nstatic struct mqtt_publish_param publish_param;\n\nstatic void wifi_mgmt_event_handler(struct net_mgmt_event_callback *cb,\n                                    uint32_t mgmt_event, struct net_if *iface)\n{\n    if (mgmt_event == NET_EVENT_WIFI_CONNECT_RESULT) {\n        printk(\"WiFi connected\\n\");\n    } else if (mgmt_event == NET_EVENT_WIFI_DISCONNECT_RESULT) {\n        printk(\"WiFi disconnected\\n\");\n    }\n}\n\nstatic void mqtt_evt_handler(struct mqtt_client *const client,\n                             const struct mqtt_evt *evt)\n{\n    switch (evt->type) {\n    case MQTT_EVT_CONNACK:\n        printk(\"MQTT client connected\\n\");\n        break;\n    case MQTT_EVT_DISCONNECT:\n        printk(\"MQTT client disconnected\\n\");\n        break;\n    default:\n        break;\n    }\n}\n\nstatic int connect_mqtt_broker(void)\n{\n    struct sockaddr_in broker;\n    int ret;\n\n    broker.sin_family = AF_INET;\n    broker.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_IP, &broker.sin_addr);\n\n    mqtt_client_init(&client_ctx);\n\n    client_ctx.broker = &broker;\n    client_ctx.evt_cb = mqtt_evt_handler;\n    client_ctx.client_id.utf8 = (uint8_t *)\"zephyr_client\";\n    client_ctx.client_id.size = strlen(\"zephyr_client\");\n    client_ctx.protocol_version = MQTT_VERSION_3_1_1;\n\n    ret = mqtt_connect(&client_ctx);\n    if (ret) {\n        printk(\"Failed to connect to MQTT broker: %d\\n\", ret);\n        return ret;\n    }\n\n    return 0;\n}\n\nstatic int publish_state(const char *state)\n{\n    int ret;\n\n    publish_param.message.topic.utf8 = (uint8_t *)MQTT_TOPIC;\n    publish_param.message.topic.size = strlen(MQTT_TOPIC);\n    publish_param.message.payload.utf8 = (uint8_t *)state;\n    publish_param.message.payload.size = strlen(state);\n    publish_param.message_id = 1U;\n    publish_param.dup_flag = 0U;\n    publish_param.retain_flag = 0U;\n    publish_param.qos = MQTT_QOS_1_AT_LEAST_ONCE;\n\n    ret = mqtt_publish(&client_ctx, &publish_param);\n    if (ret) {\n        printk(\"Failed to publish message: %d\\n\", ret);\n        return ret;\n    }\n\n    return 0;\n}\n\nint main(void)\n{\n    struct net_mgmt_event_callback wifi_mgmt_cb;\n    struct net_if *iface = net_if_get_default();\n    struct wifi_connect_req_params wifi_params = {\n        .ssid = WIFI_SSID,\n        .ssid_length = strlen(WIFI_SSID),\n        .psk = WIFI_PSK,\n        .psk_length = strlen(WIFI_PSK),\n        .channel = 0,\n        .security = WIFI_SECURITY_TYPE_PSK,\n    };\n\n    net_mgmt_init_event_callback(&wifi_mgmt_cb, wifi_mgmt_event_handler,\n                                 NET_EVENT_WIFI_CONNECT_RESULT | NET_EVENT_WIFI_DISCONNECT_RESULT);\n    net_mgmt_add_event_callback(&wifi_mgmt_cb);\n\n    wifi_connect(iface, &wifi_params);\n\n    k_sleep(K_SECONDS(10)); // Wait for WiFi to connect\n\n    if (connect_mqtt_broker() == 0) {\n        while (1) {\n            publish_state(\"work\");\n            k_sleep(K_MSEC(SLEEP_TIME_MS));\n            publish_state(\"not work\");\n            k_sleep(K_MSEC(SLEEP_TIME_MS));\n        }\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}