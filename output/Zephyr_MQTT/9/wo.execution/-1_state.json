{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ],
        [
            "user",
            "Now, try again. Check the error information: ['E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:15:10: fatal error: zephyr/drivers/wifi.h: No such file or directory\\r'] and Invoke the code tool to solve the error and structure the output with a prefix and code block. "
        ],
        [
            "user",
            "Your answer cannot contain the provided headers and apis from blacklist!): ['zephyr/kernel.h', 'zephyr/net/net_if.h', 'zephyr/net/net_core.h', 'zephyr/net/net_context.h', 'zephyr/net/wifi_mgmt.h', 'zephyr/net/mqtt.h', 'zephyr/net/socket.h', 'zephyr/sys/printk.h', 'zephyr/sys/util.h', 'zephyr/device.h', 'zephyr/drivers/gpio.h', 'zephyr/drivers/uart.h', 'zephyr/drivers/wifi.h', 'zephyr/drivers/wifi_mgmt.h']"
        ],
        [
            "user",
            "Your answer must contain all the ['zephyr/sys/printk.h', 'zephyr/net/net_mgmt.h', '#include zephyr/net/net_mgmt.h', '#include zephyr/net/socket_select.h', 'zephyr/net/wifi_mgmt.h', 'zephyr/storage/flash_map.h', 'zephyr/random/random.h', 'zephyr/kernel.h', 'zephyr/fs/nvs.h', 'zephyr/device.h', 'zephyr/drivers/flash.h', '#include zephyr/net/socket_poll.h', '#include zephyr/kernel_includes.h', 'zephyr/net/mqtt.h', 'zephyr/net/socket.h', 'zephyr/net/coap.h', '#include zephyr/net/websocket.h', 'zephyr/net/mqtt_sn.h', '#include zephyr/posix/sys/socket.h']!"
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/net_mgmt.h>\n#include <zephyr/net/socket_select.h>\n#include <zephyr/net/socket_poll.h>\n#include <zephyr/posix/sys/socket.h>\n#include <zephyr/sys/printk.h>\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"state\"\n#define MQTT_MESSAGE \"work or not work\"\n#define MQTT_KEEPALIVE 60\n#define MQTT_QOS 0\n\nstatic int mqtt_connect(int *sock)\n{\n    struct sockaddr_in broker_addr;\n\n    *sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (*sock < 0) {\n        printk(\"Failed to create socket\\n\");\n        return -1;\n    }\n\n    broker_addr.sin_family = AF_INET;\n    broker_addr.sin_port = htons(MQTT_BROKER_PORT);\n    inet_pton(AF_INET, MQTT_BROKER_IP, &broker_addr.sin_addr);\n\n    if (connect(*sock, (struct sockaddr *)&broker_addr, sizeof(broker_addr)) < 0) {\n        printk(\"Failed to connect to MQTT broker\\n\");\n        close(*sock);\n        return -1;\n    }\n\n    return 0;\n}\n\nstatic int mqtt_publish(int sock)\n{\n    uint8_t mqtt_packet[128];\n    uint8_t *ptr = mqtt_packet;\n    uint16_t len;\n\n    // Fixed header\n    *ptr++ = 0x30; // MQTT Control Packet Type (PUBLISH) and QoS level\n    *ptr++ = 0x00; // Remaining length (to be filled later)\n\n    // Variable header\n    len = strlen(MQTT_TOPIC);\n    *ptr++ = len >> 8;\n    *ptr++ = len & 0xFF;\n    memcpy(ptr, MQTT_TOPIC, len);\n    ptr += len;\n\n    // Payload\n    len = strlen(MQTT_MESSAGE);\n    memcpy(ptr, MQTT_MESSAGE, len);\n    ptr += len;\n\n    // Remaining length\n    *mqtt_packet = (ptr - mqtt_packet - 1);\n\n    if (send(sock, mqtt_packet, ptr - mqtt_packet, 0) < 0) {\n        printk(\"Failed to send MQTT publish packet\\n\");\n        return -1;\n    }\n\n    return 0;\n}\n\nint main(void)\n{\n    int sock;\n\n    if (mqtt_connect(&sock) < 0) {\n        return -1;\n    }\n\n    while (1) {\n        if (mqtt_publish(sock) < 0) {\n            break;\n        }\n        k_sleep(K_SECONDS(5));\n    }\n\n    close(sock);\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 3
}