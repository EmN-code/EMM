{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to an MQTT broker at 47.102.103.1:1883 to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ],
        [
            "user",
            "Now, try again. Check the error information: ['E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: net/socket.h: No such file or directory\\r'] and Invoke the code tool to solve the error and structure the output with a prefix and code block."
        ],
        [
            "assistant",
            "prefix: To develop an MQTT client on the ESP32 in Zephyr without using the emcute library, we need to use the native Zephyr MQTT API. We'll connect to the broker at 47.102.103.1:1883 and publish a state message ('work' or 'not work') every five seconds. Please note that the header files should be in descending alphabetical order. \n block: #include <zephyr/net/mqtt.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/kernel.h>\n#include <zephyr/device.h>\n#include <zephyr/logging/log.h>\n\nLOG_MODULE_REGISTER(mqtt_simple, LOG_LEVEL_DBG);\n\n#define BROKER_ADDR \"47.102.103.1\"\n#define BROKER_PORT 1883\n#define PUB_TOPIC \"state\"\n#define MSG_WORK \"work\"\n#define MSG_NOT_WORK \"not work\"\n#define STACK_SIZE 4096\n#define THREAD_PRIORITY 5\n\nstatic uint8_t rx_buffer[128];\nstatic uint8_t tx_buffer[128];\nstatic struct mqtt_client client;\nstatic struct sockaddr_in broker;\nstatic struct mqtt_utf8 client_id = {.utf8 = (const uint8_t *)\"mqtt_client\", .size = 11};\n\nstatic void prepare_fds(struct mqtt_client *c)\n{\n  if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {\n    c->transport.tcp.sock = zsock_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n  }\n}\n\nstatic int start_client(void)\n{\n  int err;\n\n  prepare_fds(&client);\n\n  broker.sin_family = AF_INET;\n  broker.sin_port = htons(BROKER_PORT);\n  inet_pton(AF_INET, BROKER_ADDR, &broker.sin_addr);\n\n  err = mqtt_connect(&client);\n  if (err) {\n    LOG_ERR(\"mqtt_connect failed: %d\", err);\n    return err;\n  }\n\n  return 0;\n}\n\nstatic void publish_message(struct mqtt_client *client, const char *topic, const char *msg)\n{\n  struct mqtt_publish_param param;\n\n  param.message.topic.qos = MQTT_QOS_0_AT_MOST_ONCE;\n  param.message.topic.topic.utf8 = (const uint8_t *)topic;\n  param.message.topic.topic.size = strlen(topic);\n  param.message.payload.data = (const uint8_t *)msg;\n  param.message.payload.len = strlen(msg);\n  param.message_id = 0;\n  param.dup_flag = 0;\n  param.retain_flag = 0;\n\n  mqtt_publish(client, &param);\n}\n\nvoid main(void)\n{\n  int err;\n\n  memset(&client, 0x00, sizeof(client));\n  client.broker = &broker;\n  client.evt_cb = NULL;\n  client.client_id = client_id;\n  client.password = NULL;\n  client.user_name = NULL;\n  client.protocol_version = MQTT_VERSION_3_1_1;\n  client.rx_buf = rx_buffer;\n  client.rx_buf_size = sizeof(rx_buffer);\n  client.tx_buf = tx_buffer;\n  client.tx_buf_size = sizeof(tx_buffer);\n\n  err = start_client();\n  if (err) {\n    LOG_ERR(\"Failed to start MQTT client: %d\", err);\n    return;\n  }\n\n  while (1) {\n    publish_message(&client, PUB_TOPIC, MSG_WORK);\n    k_sleep(K_SECONDS(5));\n    publish_message(&client, PUB_TOPIC, MSG_NOT_WORK);\n    k_sleep(K_SECONDS(5));\n  }\n} \n"
        ]
    ],
    "generation": "#include <zephyr/net/mqtt.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/kernel.h>\n#include <zephyr/device.h>\n#include <zephyr/logging/log.h>\n\nLOG_MODULE_REGISTER(mqtt_simple, LOG_LEVEL_DBG);\n\n#define BROKER_ADDR \"47.102.103.1\"\n#define BROKER_PORT 1883\n#define PUB_TOPIC \"state\"\n#define MSG_WORK \"work\"\n#define MSG_NOT_WORK \"not work\"\n#define STACK_SIZE 4096\n#define THREAD_PRIORITY 5\n\nstatic uint8_t rx_buffer[128];\nstatic uint8_t tx_buffer[128];\nstatic struct mqtt_client client;\nstatic struct sockaddr_in broker;\nstatic struct mqtt_utf8 client_id = {.utf8 = (const uint8_t *)\"mqtt_client\", .size = 11};\n\nstatic void prepare_fds(struct mqtt_client *c)\n{\n  if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {\n    c->transport.tcp.sock = zsock_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n  }\n}\n\nstatic int start_client(void)\n{\n  int err;\n\n  prepare_fds(&client);\n\n  broker.sin_family = AF_INET;\n  broker.sin_port = htons(BROKER_PORT);\n  inet_pton(AF_INET, BROKER_ADDR, &broker.sin_addr);\n\n  err = mqtt_connect(&client);\n  if (err) {\n    LOG_ERR(\"mqtt_connect failed: %d\", err);\n    return err;\n  }\n\n  return 0;\n}\n\nstatic void publish_message(struct mqtt_client *client, const char *topic, const char *msg)\n{\n  struct mqtt_publish_param param;\n\n  param.message.topic.qos = MQTT_QOS_0_AT_MOST_ONCE;\n  param.message.topic.topic.utf8 = (const uint8_t *)topic;\n  param.message.topic.topic.size = strlen(topic);\n  param.message.payload.data = (const uint8_t *)msg;\n  param.message.payload.len = strlen(msg);\n  param.message_id = 0;\n  param.dup_flag = 0;\n  param.retain_flag = 0;\n\n  mqtt_publish(client, &param);\n}\n\nvoid main(void)\n{\n  int err;\n\n  memset(&client, 0x00, sizeof(client));\n  client.broker = &broker;\n  client.evt_cb = NULL;\n  client.client_id = client_id;\n  client.password = NULL;\n  client.user_name = NULL;\n  client.protocol_version = MQTT_VERSION_3_1_1;\n  client.rx_buf = rx_buffer;\n  client.rx_buf_size = sizeof(rx_buffer);\n  client.tx_buf = tx_buffer;\n  client.tx_buf_size = sizeof(tx_buffer);\n\n  err = start_client();\n  if (err) {\n    LOG_ERR(\"Failed to start MQTT client: %d\", err);\n    return;\n  }\n\n  while (1) {\n    publish_message(&client, PUB_TOPIC, MSG_WORK);\n    k_sleep(K_SECONDS(5));\n    publish_message(&client, PUB_TOPIC, MSG_NOT_WORK);\n    k_sleep(K_SECONDS(5));\n  }\n}",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 4
}