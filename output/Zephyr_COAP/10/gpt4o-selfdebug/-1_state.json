{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop Zephyr code on an ESP32, which  sends a CoAP request to an COAP server. The program is configured to send CoAP POST requests \"Hello, COAP Cloud\" to the COAP server at IP address \"47.102.103.1\" and port 5683, with the URI path \"/coap/test\". "
        ],
        [
            "assistant",
            "prefix: This code demonstrates a Zephyr application running on an ESP32 device to send a CoAP POST request to a specified CoAP server. The program uses Zephyr's networking and CoAP library capabilities to create and send a CoAP packet. It initializes a UDP socket, configures the target server's address, and constructs a CoAP POST request with the payload \"Hello, COAP Cloud\" directed to the URI path \"/coap/test\" on the server located at IP address \"47.102.103.1\" on port 5683. The main loop sends the CoAP request every 5 seconds indefinitely. \n block: #include <zephyr/net/socket.h>\n#include <zephyr/net/coap.h>\n#include <zephyr/kernel.h>\n\n#define SERVER_ADDR \"47.102.103.1\"\n#define SERVER_PORT 5683\n#define REQUEST_BUFFER_SIZE 256\n\nvoid send_coap_request(void) {\n    int sock;\n    struct sockaddr_in server_addr;\n    uint8_t request_buffer[REQUEST_BUFFER_SIZE];\n    struct coap_packet request;\n    int r;\n\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n    if (sock < 0) {\n        printk(\"Failed to create socket\\n\");\n        return;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(SERVER_PORT);\n    inet_pton(AF_INET, SERVER_ADDR, &server_addr.sin_addr);\n\n    /* Initialize CoAP packet */\n    coap_packet_init(&request, request_buffer, sizeof(request_buffer), 1, COAP_TYPE_CON, 8, coap_next_id(), COAP_METHOD_POST, coap_next_token());\n\n    /* Set URI path */\n    const char *uri_path = \"/coap/test\";\n    coap_packet_append_option(&request, COAP_OPTION_URI_PATH, uri_path, strlen(uri_path));\n\n    /* Add payload */\n    const char *payload = \"Hello, COAP Cloud\";\n    coap_packet_append_payload_marker(&request);\n    coap_packet_append_payload(&request, (uint8_t *)payload, strlen(payload));\n\n    /* Send CoAP packet */\n    r = sendto(sock, request.data, request.offset, 0, (struct sockaddr *)&server_addr, sizeof(server_addr));\n    if (r < 0) {\n        printk(\"Failed to send CoAP request\\n\");\n    } else {\n        printk(\"CoAP request sent successfully\\n\");\n    }\n\n    close(sock);\n}\n\nint main(void) {\n    while (1) {\n        send_coap_request();\n        k_sleep(K_SECONDS(5));\n    }\n    return 0;\n}\n \n"
        ]
    ],
    "generation": "#include <zephyr/net/socket.h>\n#include <zephyr/net/coap.h>\n#include <zephyr/kernel.h>\n\n#define SERVER_ADDR \"47.102.103.1\"\n#define SERVER_PORT 5683\n#define REQUEST_BUFFER_SIZE 256\n\nvoid send_coap_request(void) {\n    int sock;\n    struct sockaddr_in server_addr;\n    uint8_t request_buffer[REQUEST_BUFFER_SIZE];\n    struct coap_packet request;\n    int r;\n\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n    if (sock < 0) {\n        printk(\"Failed to create socket\\n\");\n        return;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(SERVER_PORT);\n    inet_pton(AF_INET, SERVER_ADDR, &server_addr.sin_addr);\n\n    /* Initialize CoAP packet */\n    coap_packet_init(&request, request_buffer, sizeof(request_buffer), 1, COAP_TYPE_CON, 8, coap_next_id(), COAP_METHOD_POST, coap_next_token());\n\n    /* Set URI path */\n    const char *uri_path = \"/coap/test\";\n    coap_packet_append_option(&request, COAP_OPTION_URI_PATH, uri_path, strlen(uri_path));\n\n    /* Add payload */\n    const char *payload = \"Hello, COAP Cloud\";\n    coap_packet_append_payload_marker(&request);\n    coap_packet_append_payload(&request, (uint8_t *)payload, strlen(payload));\n\n    /* Send CoAP packet */\n    r = sendto(sock, request.data, request.offset, 0, (struct sockaddr *)&server_addr, sizeof(server_addr));\n    if (r < 0) {\n        printk(\"Failed to send CoAP request\\n\");\n    } else {\n        printk(\"CoAP request sent successfully\\n\");\n    }\n\n    close(sock);\n}\n\nint main(void) {\n    while (1) {\n        send_coap_request();\n        k_sleep(K_SECONDS(5));\n    }\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}