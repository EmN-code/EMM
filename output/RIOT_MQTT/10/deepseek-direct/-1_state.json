{
    "error": [
        "/root/RIOT/examples/LLM_Gen/main.c:5:10: fatal error: net/socket.h: No such file or directory"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a RIOT program for the ESP32 that connects to an MQTT broker at\u00a047.102.103.1:1883\u00a0to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <stdio.h>\n#include <string.h>\n#include <xtimer.h>\n#include <net/socket.h>\n#include <net/conn/tcp.h>\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n#define MQTT_QOS 0\n#define MQTT_RETAIN 0\n#define MQTT_PAYLOAD_LEN 128\n#define MQTT_CLIENT_ID \"esp32_client\"\n\n#define PUBLISH_INTERVAL (5 * 1000000U) // 5 seconds in microseconds\n\nstatic char mqtt_payload[MQTT_PAYLOAD_LEN];\nstatic int sock;\n\nvoid mqtt_connect(void) {\n    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (sock < 0) {\n        puts(\"Error creating socket\");\n        return;\n    }\n\n    struct sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(MQTT_BROKER_PORT);\n    server_addr.sin_addr.s_addr = inet_addr(MQTT_BROKER_IP);\n\n    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        puts(\"Error connecting to MQTT broker\");\n        close(sock);\n        return;\n    }\n\n    puts(\"Connected to MQTT broker\");\n}\n\nvoid mqtt_publish(const char *topic, const char *payload) {\n    uint8_t mqtt_packet[128];\n    uint8_t *ptr = mqtt_packet;\n\n    // Fixed header\n    *ptr++ = 0x30; // MQTT Control Packet type (PUBLISH) with QoS 0\n    *ptr++ = strlen(topic) + strlen(payload) + 2; // Remaining length\n\n    // Variable header\n    *ptr++ = (uint8_t)(strlen(topic) >> 8); // Topic length MSB\n    *ptr++ = (uint8_t)(strlen(topic) & 0xFF); // Topic length LSB\n    memcpy(ptr, topic, strlen(topic));\n    ptr += strlen(topic);\n\n    // Payload\n    memcpy(ptr, payload, strlen(payload));\n    ptr += strlen(payload);\n\n    // Send the packet\n    send(sock, mqtt_packet, ptr - mqtt_packet, 0);\n}\n\nvoid publish_state(void) {\n    static int state = 0;\n    const char *states[] = {\"work\", \"not work\"};\n\n    snprintf(mqtt_payload, MQTT_PAYLOAD_LEN, \"%s\", states[state]);\n    mqtt_publish(MQTT_TOPIC, mqtt_payload);\n\n    state = !state; // Toggle state\n}\n\nint main(void) {\n    puts(\"Starting MQTT client on ESP32\");\n\n    mqtt_connect();\n\n    while (1) {\n        publish_state();\n        xtimer_usleep(PUBLISH_INTERVAL);\n    }\n\n    close(sock);\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}