{
    "error": [
        "/root/RIOT/examples/LLM_Gen/main.c:5:10: fatal error: net/socket.h: No such file or directory"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop a RIOT program for the ESP32 that connects to an MQTT broker at\u00a047.102.103.1:1883\u00a0to publish state (\u201dwork or not work\u201d) each five seconds. Do not use emcute lib."
        ]
    ],
    "generation": "\n#include <stdio.h>\n#include <string.h>\n#include <xtimer.h>\n#include <net/socket.h>\n#include <net/conn/tcp.h>\n#include <net/ipv4/addr.h>\n\n#define MQTT_BROKER_IP \"47.102.103.1\"\n#define MQTT_BROKER_PORT 1883\n#define MQTT_TOPIC \"device/state\"\n#define MQTT_PAYLOAD_WORK \"work\"\n#define MQTT_PAYLOAD_NOT_WORK \"not work\"\n#define MQTT_QOS 0\n#define MQTT_RETAIN 0\n#define MQTT_KEEPALIVE 60\n#define MQTT_CLIENT_ID \"esp32_client\"\n\n#define PUBLISH_INTERVAL (5 * 1000000U) // 5 seconds in microseconds\n\nstatic int mqtt_connect(int sock) {\n    uint8_t connect_packet[] = {\n        0x10, 0x26, // Fixed header\n        0x00, 0x04, 'M', 'Q', 'T', 'T', 0x04, 0x02, // Protocol name and level\n        0x00, 0x3C, // Keepalive\n        0x00, 0x0B, 'e', 's', 'p', '3', '2', '_', 'c', 'l', 'i', 'e', 'n', 't' // Client ID\n    };\n\n    return send(sock, connect_packet, sizeof(connect_packet), 0);\n}\n\nstatic int mqtt_publish(int sock, const char *topic, const char *payload) {\n    uint8_t publish_packet[128];\n    uint16_t topic_len = strlen(topic);\n    uint16_t payload_len = strlen(payload);\n    uint16_t packet_len = 2 + topic_len + payload_len;\n\n    publish_packet[0] = 0x30; // Fixed header (PUBLISH)\n    publish_packet[1] = packet_len;\n    publish_packet[2] = (topic_len >> 8) & 0xFF;\n    publish_packet[3] = topic_len & 0xFF;\n    memcpy(&publish_packet[4], topic, topic_len);\n    memcpy(&publish_packet[4 + topic_len], payload, payload_len);\n\n    return send(sock, publish_packet, 4 + topic_len + payload_len, 0);\n}\n\nint main(void) {\n    int sock;\n    struct sockaddr_in server_addr;\n\n    // Initialize the network stack\n    if (net_init() < 0) {\n        puts(\"Error initializing network stack\");\n        return 1;\n    }\n\n    // Create a TCP socket\n    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (sock < 0) {\n        puts(\"Error creating socket\");\n        return 1;\n    }\n\n    // Set up the server address\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(MQTT_BROKER_PORT);\n    inet_aton(MQTT_BROKER_IP, &server_addr.sin_addr);\n\n    // Connect to the MQTT broker\n    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        puts(\"Error connecting to MQTT broker\");\n        close(sock);\n        return 1;\n    }\n\n    // Send MQTT CONNECT packet\n    if (mqtt_connect(sock) < 0) {\n        puts(\"Error sending MQTT CONNECT packet\");\n        close(sock);\n        return 1;\n    }\n\n    // Main loop to publish state every 5 seconds\n    bool work_state = true;\n    while (1) {\n        const char *payload = work_state ? MQTT_PAYLOAD_WORK : MQTT_PAYLOAD_NOT_WORK;\n        if (mqtt_publish(sock, MQTT_TOPIC, payload) < 0) {\n            puts(\"Error publishing MQTT message\");\n            close(sock);\n            return 1;\n        }\n\n        printf(\"Published: %s\\n\", payload);\n        work_state = !work_state; // Toggle state\n\n        xtimer_usleep(PUBLISH_INTERVAL);\n    }\n\n    close(sock);\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}