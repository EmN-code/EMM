{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a RIOT program for the ESP32 that connects to a UDP server at\u00a0`47.102.103.1:20001`\u00a0to send device state (\u201dwork or not work\u201d) by UDP method every five seconds."
        ]
    ],
    "generation": "\n#include <stdio.h>\n#include <string.h>\n#include <xtimer.h>\n#include <net/sock/udp.h>\n\n#define SERVER_IP \"47.102.103.1\"\n#define SERVER_PORT 20001\n#define INTERVAL_MS (5 * 1000000U)  // 5 seconds in microseconds\n\nstatic void send_state(void) {\n    static int state = 0;  // 0 for \"not work\", 1 for \"work\"\n    char message[20];\n\n    if (state == 0) {\n        strcpy(message, \"not work\");\n        state = 1;\n    } else {\n        strcpy(message, \"work\");\n        state = 0;\n    }\n\n    sock_udp_ep_t remote = { .family = AF_INET, .port = SERVER_PORT };\n    inet_addr_from_str((ipv4_addr_t *)&remote.addr.ipv4, SERVER_IP);\n\n    sock_udp_t sock;\n    sock_udp_create(&sock, NULL, &remote, 0);\n\n    ssize_t res = sock_udp_send(&sock, message, strlen(message), NULL);\n    if (res < 0) {\n        puts(\"Failed to send message\");\n    } else {\n        printf(\"Sent: %s\\n\", message);\n    }\n\n    sock_udp_close(&sock);\n}\n\nint main(void) {\n    while (1) {\n        send_state();\n        xtimer_usleep(INTERVAL_MS);\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}