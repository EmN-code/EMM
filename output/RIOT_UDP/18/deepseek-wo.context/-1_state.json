{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a RIOT program for the ESP32 that connects to a UDP server at\u00a0`47.102.103.1:20001`\u00a0to send device state (\u201dwork or not work\u201d) by UDP method every five seconds."
        ]
    ],
    "generation": "\n#include <stdio.h>\n#include <string.h>\n#include <xtimer.h>\n#include <net/sock/udp.h>\n\n#define SERVER_IP \"47.102.103.1\"\n#define SERVER_PORT 20001\n#define INTERVAL_MS (5 * 1000000U)  // 5 seconds in microseconds\n\nstatic void send_state(void) {\n    static int state = 0;  // 0 for \"not work\", 1 for \"work\"\n    const char *state_str = state ? \"work\" : \"not work\";\n    state = !state;  // Toggle state\n\n    sock_udp_ep_t remote = { .family = AF_INET, .port = SERVER_PORT };\n    inet_addr_from_str((struct in_addr *)&remote.addr.ipv4, SERVER_IP);\n\n    sock_udp_t sock;\n    sock_udp_ep_t local = { .family = AF_INET };\n\n    if (sock_udp_create(&sock, &local, &remote, 0) < 0) {\n        puts(\"Error creating UDP socket\");\n        return;\n    }\n\n    if (sock_udp_send(&sock, state_str, strlen(state_str), &remote) < 0) {\n        puts(\"Error sending UDP packet\");\n    } else {\n        printf(\"Sent: %s\\n\", state_str);\n    }\n\n    sock_udp_close(&sock);\n}\n\nint main(void) {\n    puts(\"UDP client starting\");\n\n    while (1) {\n        send_state();\n        xtimer_usleep(INTERVAL_MS);\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}