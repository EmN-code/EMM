{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop RIOT code on an ESP32. It reads the DHT11 every 5 seconds and turns on an LED warning when the temperature exceeds a threshold."
        ]
    ],
    "generation": "\n#include \"xtimer.h\"\n#include \"periph/gpio.h\"\n#include \"dht.h\"\n#include \"thread.h\"\n\n#define DHT_PIN             GPIO_PIN(0, 18)  // GPIO pin for DHT11\n#define LED_PIN             GPIO_PIN(0, 2)   // GPIO pin for LED\n#define TEMP_THRESHOLD      25               // Temperature threshold in Celsius\n#define SLEEP_INTERVAL      5                // Sleep interval in seconds\n\nstatic dht_t dht_dev;\nstatic int16_t temperature, humidity;\n\nvoid read_dht11(void) {\n    while (1) {\n        if (dht_read(&dht_dev, &temperature, &humidity) == DHT_OK) {\n            printf(\"Temperature: %d.%d\u00b0C, Humidity: %d.%d%%\\n\",\n                   temperature / 10, temperature % 10,\n                   humidity / 10, humidity % 10);\n\n            if (temperature / 10 > TEMP_THRESHOLD) {\n                gpio_set(LED_PIN);  // Turn on LED\n            } else {\n                gpio_clear(LED_PIN);  // Turn off LED\n            }\n        } else {\n            puts(\"Failed to read from DHT11 sensor\");\n        }\n\n        xtimer_sleep(SLEEP_INTERVAL);  // Sleep for 5 seconds\n    }\n}\n\nint main(void) {\n    // Initialize DHT11 sensor\n    dht_params_t dht_params = {\n        .pin = DHT_PIN,\n        .type = DHT11\n    };\n    dht_init(&dht_dev, &dht_params);\n\n    // Initialize LED pin\n    gpio_init(LED_PIN, GPIO_OUT);\n\n    // Start the DHT11 reading thread\n    thread_create(\n        thread_stack(read_dht11),\n        THREAD_STACKSIZE_DEFAULT,\n        THREAD_PRIORITY_MAIN - 1,\n        0,\n        read_dht11,\n        NULL,\n        \"dht11_reader\"\n    );\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}