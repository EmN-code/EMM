{
    "error": [
        "E:/local_code/IoT/zephyrproject/zephyr/my/LLM_Gen/src/main.c:2:10: fatal error: zephyr.h: No such file or directory\r"
    ],
    "errorstate": "not pass",
    "messages": [
        [
            "user",
            "I need to develop Zephyr code on an ESP32. It read MMA8x5x every 5 seconds and uses NVS to store the reading value persistently. "
        ]
    ],
    "generation": "\n#include <zephyr.h>\n#include <device.h>\n#include <drivers/sensor.h>\n#include <storage/flash_map.h>\n#include <fs/nvs.h>\n#include <logging/log.h>\n\n#define MMA8X5X_DEV_NAME DT_LABEL(DT_INST(0, nxp_mma8x5x))\n#define NVS_PARTITION FLASH_AREA_ID(storage)\n#define NVS_NAMESPACE \"mma8x5x_data\"\n\nLOG_MODULE_REGISTER(main);\n\nstatic struct nvs_fs fs;\n\nvoid init_nvs(void) {\n    int err;\n    struct flash_sector_param sectors[1];\n\n    sectors[0].fs_size = 4096;\n    sectors[0].offset = FLASH_AREA_OFFSET(storage);\n\n    fs.sector_size = 4096;\n    fs.sector_count = 1;\n    fs.offset = FLASH_AREA_OFFSET(storage);\n\n    err = nvs_init(&fs, DT_LABEL(DT_INST(0, soc_flash_0)));\n    if (err) {\n        LOG_ERR(\"NVS init failed: %d\", err);\n    }\n}\n\nvoid store_reading(int16_t reading) {\n    int err;\n    static uint16_t id = 0;\n\n    err = nvs_write(&fs, id++, &reading, sizeof(reading));\n    if (err < 0) {\n        LOG_ERR(\"NVS write failed: %d\", err);\n    }\n}\n\nvoid read_mma8x5x(const struct device *dev) {\n    struct sensor_value accel[3];\n    int16_t reading;\n\n    if (sensor_sample_fetch(dev) < 0) {\n        LOG_ERR(\"Failed to fetch sample\");\n        return;\n    }\n\n    if (sensor_channel_get(dev, SENSOR_CHAN_ACCEL_XYZ, accel) < 0) {\n        LOG_ERR(\"Failed to get sensor data\");\n        return;\n    }\n\n    reading = (int16_t)(accel[0].val1 + accel[1].val1 + accel[2].val1);\n    LOG_INF(\"MMA8x5x reading: %d\", reading);\n\n    store_reading(reading);\n}\n\nvoid main(void) {\n    const struct device *dev;\n\n    dev = device_get_binding(MMA8X5X_DEV_NAME);\n    if (!dev) {\n        LOG_ERR(\"Could not get MMA8x5x device\");\n        return;\n    }\n\n    init_nvs();\n\n    while (1) {\n        read_mma8x5x(dev);\n        k_sleep(K_SECONDS(5));\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}