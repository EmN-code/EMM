{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to a UDP server at `47.102.103.1:20001` to send device state (\u201dwork or not work\u201d) by UDP method every five seconds."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/net/net_ip.h>\n#include <zephyr/net/net_core.h>\n#include <zephyr/net/net_context.h>\n#include <zephyr/net/net_mgmt.h>\n#include <zephyr/net/net_event.h>\n#include <zephyr/net/net_if.h>\n#include <zephyr/net/ethernet.h>\n#include <zephyr/net/wifi_mgmt.h>\n#include <zephyr/logging/log.h>\n\n#define UDP_SERVER_IP \"47.102.103.1\"\n#define UDP_SERVER_PORT 20001\n#define DEVICE_STATE_WORK \"work\"\n#define DEVICE_STATE_NOT_WORK \"not work\"\n#define SEND_INTERVAL_SECONDS 5\n\nLOG_MODULE_REGISTER(udp_client);\n\nstatic int udp_socket;\nstatic struct sockaddr_in udp_server_addr;\n\nvoid send_device_state(const char *state)\n{\n    if (sendto(udp_socket, state, strlen(state), 0, (struct sockaddr *)&udp_server_addr, sizeof(udp_server_addr)) < 0) {\n        LOG_ERR(\"Failed to send device state\");\n    } else {\n        LOG_INF(\"Device state sent: %s\", state);\n    }\n}\n\nvoid main(void)\n{\n    int ret;\n    struct net_if *iface;\n\n    // Initialize the network interface\n    iface = net_if_get_default();\n    if (!iface) {\n        LOG_ERR(\"Failed to get default network interface\");\n        return;\n    }\n\n    // Initialize the UDP socket\n    udp_socket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n    if (udp_socket < 0) {\n        LOG_ERR(\"Failed to create UDP socket\");\n        return;\n    }\n\n    // Set up the UDP server address\n    memset(&udp_server_addr, 0, sizeof(udp_server_addr));\n    udp_server_addr.sin_family = AF_INET;\n    udp_server_addr.sin_port = htons(UDP_SERVER_PORT);\n    ret = inet_pton(AF_INET, UDP_SERVER_IP, &udp_server_addr.sin_addr);\n    if (ret < 0) {\n        LOG_ERR(\"Invalid IP address\");\n        close(udp_socket);\n        return;\n    }\n\n    // Send device state every 5 seconds\n    while (1) {\n        send_device_state(DEVICE_STATE_WORK);\n        k_sleep(K_SECONDS(SEND_INTERVAL_SECONDS));\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}