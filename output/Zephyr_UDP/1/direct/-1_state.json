{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to a UDP server at `47.102.103.1:20001` to send device state (\u201dwork or not work\u201d) by UDP method every five seconds."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/sys/printk.h>\n#include <string.h>\n\n#define SERVER_IP \"47.102.103.1\"\n#define SERVER_PORT 20001\n#define DEVICE_STATE \"work\"  // or \"not work\"\n#define SEND_INTERVAL 5000  // 5 seconds\n\nint main(void) {\n    int sock;\n    struct sockaddr_in server_addr;\n    char buffer[128];\n\n    // Create a UDP socket\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n    if (sock < 0) {\n        printk(\"Error creating socket\\n\");\n        return -1;\n    }\n\n    // Set up the server address structure\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(SERVER_PORT);\n    inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr);\n\n    while (1) {\n        // Prepare the message to send\n        snprintf(buffer, sizeof(buffer), \"Device state: %s\", DEVICE_STATE);\n\n        // Send the message to the server\n        if (sendto(sock, buffer, strlen(buffer), 0, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            printk(\"Error sending data\\n\");\n        } else {\n            printk(\"Sent: %s\\n\", buffer);\n        }\n\n        // Wait for 5 seconds before sending the next message\n        k_sleep(K_MSEC(SEND_INTERVAL));\n    }\n\n    // Close the socket (this part is unreachable in this example)\n    close(sock);\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}