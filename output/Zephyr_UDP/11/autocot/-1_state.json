{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to a UDP server at `47.102.103.1:20001` to send device state (\u201dwork or not work\u201d) by UDP method every five seconds."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/device.h>\n#include <zephyr/drivers/gpio.h>\n#include <zephyr/logging/log.h>\n\n#define UDP_SERVER_IP \"47.102.103.1\"\n#define UDP_SERVER_PORT 20001\n#define SEND_INTERVAL K_SECONDS(5)\n\nLOG_MODULE_REGISTER(main);\n\nconst struct device *gpio_dev;\nstatic int sock;\n\nvoid send_device_state(const char *state)\n{\n    struct sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(UDP_SERVER_PORT);\n    inet_pton(AF_INET, UDP_SERVER_IP, &server_addr.sin_addr);\n\n    int ret = sendto(sock, state, strlen(state), 0, (struct sockaddr *)&server_addr, sizeof(server_addr));\n    if (ret < 0) {\n        LOG_ERR(\"Failed to send UDP message: %d\", errno);\n    } else {\n        LOG_INF(\"Sent device state: %s\", state);\n    }\n}\n\nvoid main(void)\n{\n    // Initialize GPIO\n    gpio_dev = device_get_binding(\"GPIO_0\");\n    if (!gpio_dev) {\n        LOG_ERR(\"Could not get GPIO device\");\n        return;\n    }\n\n    // Configure GPIO pin for input\n    gpio_pin_configure(gpio_dev, 13, GPIO_INPUT);\n\n    // Create UDP socket\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n    if (sock < 0) {\n        LOG_ERR(\"Failed to create UDP socket: %d\", errno);\n        return;\n    }\n\n    while (1) {\n        // Read GPIO pin state\n        int pin_state = gpio_pin_get(gpio_dev, 13);\n        if (pin_state < 0) {\n            LOG_ERR(\"Failed to read GPIO pin state: %d\", pin_state);\n        } else {\n            if (pin_state == 0) {\n                send_device_state(\"not work\");\n            } else {\n                send_device_state(\"work\");\n            }\n        }\n\n        // Wait for 5 seconds before sending the next state\n        k_sleep(SEND_INTERVAL);\n    }\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}