{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to a UDP server at `47.102.103.1:20001` to send device state (\u201dwork or not work\u201d) by UDP method every five seconds."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/device.h>\n#include <zephyr/drivers/gpio.h>\n#include <zephyr/sys/printk.h>\n\n#define UDP_SERVER_IP \"47.102.103.1\"\n#define UDP_SERVER_PORT 20001\n#define DEVICE_STATE_MSG \"work\"\n#define DEVICE_STATE_MSG_LEN 4\n#define SEND_INTERVAL_SECONDS 5\n\nvoid send_device_state(int sock, const struct sockaddr *server_addr) {\n    ssize_t ret;\n    ret = sendto(sock, DEVICE_STATE_MSG, DEVICE_STATE_MSG_LEN, 0, server_addr, sizeof(struct sockaddr_in));\n    if (ret < 0) {\n        printk(\"Failed to send device state: %d\\n\", errno);\n    } else {\n        printk(\"Device state sent successfully\\n\");\n    }\n}\n\nint main(void) {\n    int sock;\n    struct sockaddr_in server_addr;\n\n    // Create UDP socket\n    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n    if (sock < 0) {\n        printk(\"Failed to create socket: %d\\n\", errno);\n        return -1;\n    }\n\n    // Set up server address\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(UDP_SERVER_PORT);\n    inet_pton(AF_INET, UDP_SERVER_IP, &server_addr.sin_addr);\n\n    // Send device state every 5 seconds\n    while (1) {\n        send_device_state(sock, (struct sockaddr *)&server_addr);\n        k_sleep(K_SECONDS(SEND_INTERVAL_SECONDS));\n    }\n\n    // Close socket (this part will never be reached in this example)\n    close(sock);\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}