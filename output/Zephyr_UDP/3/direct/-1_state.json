{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to a UDP server at `47.102.103.1:20001` to send device state (\u201dwork or not work\u201d) by UDP method every five seconds."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/net/net_ip.h>\n#include <zephyr/net/net_context.h>\n#include <zephyr/net/net_mgmt.h>\n#include <zephyr/net/net_if.h>\n#include <zephyr/net/ethernet.h>\n#include <zephyr/net/wifi_mgmt.h>\n#include <zephyr/logging/log.h>\n\n#define UDP_SERVER_IP \"47.102.103.1\"\n#define UDP_SERVER_PORT 20001\n#define DEVICE_STATE_WORK \"work\"\n#define DEVICE_STATE_NOT_WORK \"not work\"\n#define SEND_INTERVAL_SECONDS 5\n\nLOG_MODULE_REGISTER(udp_client);\n\nstatic int connect_udp_server(int *sock, struct sockaddr_in *server_addr)\n{\n    *sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n    if (*sock < 0) {\n        LOG_ERR(\"Failed to create UDP socket\");\n        return -1;\n    }\n\n    server_addr->sin_family = AF_INET;\n    server_addr->sin_port = htons(UDP_SERVER_PORT);\n    if (inet_pton(AF_INET, UDP_SERVER_IP, &server_addr->sin_addr) <= 0) {\n        LOG_ERR(\"Invalid address/ Address not supported\");\n        return -1;\n    }\n\n    return 0;\n}\n\nstatic void send_device_state(int sock, struct sockaddr_in *server_addr)\n{\n    const char *state = (k_uptime_get() % 10000 < 5000) ? DEVICE_STATE_WORK : DEVICE_STATE_NOT_WORK;\n    ssize_t bytes_sent = sendto(sock, state, strlen(state), 0, (struct sockaddr *)server_addr, sizeof(*server_addr));\n    if (bytes_sent < 0) {\n        LOG_ERR(\"Failed to send data to UDP server\");\n    } else {\n        LOG_INF(\"Sent device state: %s\", state);\n    }\n}\n\nint main(void)\n{\n    int sock;\n    struct sockaddr_in server_addr;\n\n    if (connect_udp_server(&sock, &server_addr) < 0) {\n        return -1;\n    }\n\n    while (1) {\n        send_device_state(sock, &server_addr);\n        k_sleep(K_SECONDS(SEND_INTERVAL_SECONDS));\n    }\n\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}