{
    "error": [],
    "errorstate": "pass",
    "messages": [
        [
            "user",
            "I need to develop a Zephyr program for the ESP32 that connects to a UDP server at `47.102.103.1:20001` to send device state (\u201dwork or not work\u201d) by UDP method every five seconds."
        ]
    ],
    "generation": "\n#include <zephyr/kernel.h>\n#include <zephyr/net/socket.h>\n#include <zephyr/net/net_mgmt.h>\n#include <zephyr/net/net_if.h>\n#include <zephyr/net/wifi_mgmt.h>\n#include <zephyr/logging/log.h>\n\n#define SERVER_IP \"47.102.103.1\"\n#define SERVER_PORT 20001\n#define WIFI_SSID \"your_wifi_ssid\"\n#define WIFI_PSK \"your_wifi_password\"\n\nLOG_MODULE_REGISTER(udp_client);\n\nstatic int connect_wifi(void) {\n    struct net_if *iface = net_if_get_default();\n    struct wifi_connect_req_params params = {\n        .ssid = WIFI_SSID,\n        .ssid_length = strlen(WIFI_SSID),\n        .psk = WIFI_PSK,\n        .psk_length = strlen(WIFI_PSK),\n        .channel = 0,\n        .security = WIFI_SECURITY_TYPE_PSK,\n    };\n\n    return net_mgmt(NET_REQUEST_WIFI_CONNECT, iface, &params, sizeof(params));\n}\n\nstatic int create_udp_socket(void) {\n    int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n    if (sock < 0) {\n        LOG_ERR(\"Failed to create UDP socket: %d\", sock);\n        return -1;\n    }\n\n    struct sockaddr_in server_addr = {\n        .sin_family = AF_INET,\n        .sin_port = htons(SERVER_PORT),\n        .sin_addr.s_addr = inet_addr(SERVER_IP),\n    };\n\n    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        LOG_ERR(\"Failed to connect to server: %d\", errno);\n        close(sock);\n        return -1;\n    }\n\n    return sock;\n}\n\nstatic void send_device_state(int sock, const char *state) {\n    if (send(sock, state, strlen(state), 0) < 0) {\n        LOG_ERR(\"Failed to send data: %d\", errno);\n    } else {\n        LOG_INF(\"Sent: %s\", state);\n    }\n}\n\nint main(void) {\n    if (connect_wifi() < 0) {\n        LOG_ERR(\"Failed to connect to WiFi\");\n        return -1;\n    }\n\n    int sock = create_udp_socket();\n    if (sock < 0) {\n        LOG_ERR(\"Failed to create UDP socket\");\n        return -1;\n    }\n\n    while (1) {\n        send_device_state(sock, \"work\");\n        k_sleep(K_SECONDS(5));\n        send_device_state(sock, \"not work\");\n        k_sleep(K_SECONDS(5));\n    }\n\n    close(sock);\n    return 0;\n}\n",
    "runtimelogs": "",
    "runtimestate": "",
    "iterations": 1
}